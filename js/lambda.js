// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, require, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]};
	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullpath, state, id) {
		var name, dir, exports, module, fn, found, i, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullpath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullpath, 1, id);
			}
			return resolve(scope, tree, 'index', fullpath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullpath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	require = function (scope, tree, fullpath, id) {
		var name, path = fullpath, t = fullpath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) throw notFoundError(fullpath);
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullpath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return require(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"/": {
		"var": {
			"www": {
				"galojs": {
					"js": {
						"lambda.webmake.js": function (exports, module, require) {
							/*function string_to_html (str) {
								return str.replace(/\n/g, "<br>").replace(/\t/g, "&nbsp;");
							}*/

							var Lambda = require("../node/lib/lambda.js");
							var AST = require("../node/lib/ast.js");


							function print (msg) {
								if (msg !== undefined) { 
								  msg = msg.toString(); 
								}
								else {
									msg = '#undef'
								}
								$("#output").append('<div class="blocks">'+msg+'</div>');
							}


							$(document).ready(function() {
								
							  print("start");

							  function updateCode() {
									var code = $("#code").val();
									
									try {
										$("#output").html("");
										eval(code);
									} catch (e) {
										print(e);
										throw e;
									}
							  };

							  $("#code").bind('input propertychange', function () {
								updateCode();
							  });

							  updateCode();
							  
							});


						}
					},
					"node": {
						"lib": {
							"ast.js": function (exports, module, require) {
								var esprima = require("./esprima.js")

								function AST (ast) {
									if (!ast) return ast;

									if (ast instanceof Array) {
										var r = [];
										for (var i in ast) {
											r[i] = AST(ast[i])
										}
										
										return r;
									}

									// console.log ("TODO: RANGE="+ JSON.stringify (ast.range));
									switch (ast.type) {
										case "ArrayExpression":
											return new AST.ArrayExpression ({
												type: ast.type,
								                elements: AST(ast.elements),
								                start: ast.range[0],
								                end: ast.range[1]
											});
										case "AssignmentExpression":
											return new AST.AssignmentExpression ({
												type: ast.type,
								                operator: ast.operator,
								                left: AST(ast.left),
								                right: AST(ast.right),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "BinaryExpression":
											return new AST.BinaryExpression ({
												type: ast.type,
								                operator: ast.operator,
								                left: AST(ast.left),
								                right: AST(ast.right),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "BlockStatement":
											return new AST.BlockStatement ({
												type: ast.type,
												body: AST (ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "BreakStatement":
											return new AST.BreakStatement ({
												type: ast.type,
												label: ast.label,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "CallExpression":
											return new AST.CallExpression ({
												type: ast.type,
												callee: AST(ast.callee),
								                'arguments': AST(ast.arguments),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "CatchClause":
											return new AST.CatchClause ({
												type: ast.type,
												param: AST(ast.param),
												body: AST (ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "ConditionalExpression":
											return new AST.ConditionalExpression ({
												type: ast.type,
												test: AST(ast.test),
								                consequent: AST(ast.consequent),
								                alternate: AST(ast.alternate),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "ContinueStatement":
											return new AST.ContinueStatement ({
												type: ast.type,
												label: ast.label,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "DebuggerStatement":
											return new AST.DebuggerStatement ({
												type: ast.type,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "DoWhileStatement":
											return new AST.DoWhileStatement ({
												type: ast.type,
												body: AST (ast.body),
												test: AST(ast.test),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "EmptyStatement":
											return new AST.EmptyStatement ({
												type: ast.type,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "ExpressionStatement":
											return new AST.ExpressionStatement ({
												type: ast.type,
												expression: AST(ast.expression),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "ForStatement":
											return new AST.ForStatement ({
												type: ast.type,
												init: AST(ast.init),
								                test: AST(ast.test),
								                update: AST(ast.update),
												body: AST (ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "ForInStatement":
											return new AST.ForInStatement ({
												type: ast.type,
												left: AST(ast.left),
								                right: AST(ast.right),
								                each: ast.each,
												body: AST (ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "FunctionDeclaration":
											return new AST.FunctionDeclaration ({
												type: ast.type,
												id: AST(ast.id),
								                params: AST(ast.params),
								                defaults: AST(ast.defaults),
												body: AST (ast.body),
								                rest: ast.rest,
								                generator: ast.generator,
								                expression: ast.expression,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "FunctionExpression":
											return new AST.FunctionExpression ({
												type: ast.type,
												id: ast.id,
								                params: AST(ast.params),
								                defaults: AST(ast.defaults),
								                rest: ast.rest,
								                generator: ast.generator,
								                expression: ast.expression,
												body: AST (ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "Identifier":
											return new AST.Identifier ({
												type: ast.type,
												name: ast.name,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "IfStatement":
											return new AST.IfStatement ({
												type: ast.type,
												test: AST(ast.test),
								                consequent: AST(ast.consequent),
								                alternate: AST(ast.alternate),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "LabeledStatement":
											return new AST.LabeledStatement ({
												type: ast.type,
												label: ast.label,
												body: AST (ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "Literal":
											return new AST.Literal ({
												type: ast.type,
												value: ast.value,
								                raw: ast.raw,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "MemberExpression":
											return new AST.MemberExpression ({
												type: ast.type,
												computed: ast.computed,
								                object: ast.object,
								                property: ast.property,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "NewExpression":
											return new AST.NewExpression ({
												type: ast.type,
												callee: AST(ast.callee),
								                'arguments': AST(ast.arguments),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "ObjectExpression":
											return new AST.ObjectExpression ({
												type: ast.type,
												properties: AST(ast.properties),
								                start: ast.range[0],
								                end: ast.range[1]
											});

										case "PostfixExpression":
											return new AST.PostfixExpression ({
												type: ast.type,
												operator: ast.operator,
								                argument: AST(ast.argument),
								                prefix: ast.prefix,
								                start: ast.range[0],
								                end: ast.range[1]
											});

										case "Program":
											return new AST.Program ({
												type: ast.type,
												body: AST (ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});
												
										case "Property":
											return new AST.Property ({
												type: ast.type,
												key: ast.key,
								                value: ast.value,
								                kind: ast.kind,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "ReturnStatement":
											return new AST.ReturnStatement ({
												type: ast.type,
												argument: AST(ast.argument)
											});
											
										case "SequenceExpression":
											return new AST.SequenceExpression ({
												type: ast.type,
												expressions: AST(ast.expressions),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "SwitchCase":
											return new AST.SwitchCase ({
												type: ast.type,
												test: AST(ast.test),
								                consequent: AST(ast.consequent),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "SwitchStatement":
											return new AST.SwitchStatement ({
												type: ast.type,
												discriminant: AST(ast.discriminant),
								                cases: AST(ast.cases),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "ThisExpression":
											return new AST.ThisExpression ({
												type: ast.type,
												body: AST (ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "ThrowStatement":
											return new AST.ThrowStatement ({
												type: ast.type,
												argument: AST(argument),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "TryStatement":
											return new AST.TryStatement ({
												type: ast.type,
												block: block,
								                guardedHandlers: guardedHandlers,
								                handlers: handlers,
								                finalizer: finalizer,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "UnaryExpression":
											return new AST.UnaryExpression ({
												type: ast.type,
												operator: ast.operator,
								                argument: AST(ast.argument),
								                prefix: ast.prefix,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "VariableDeclaration":
											return new AST.VariableDeclaration ({
												type: ast.type,
												declarations: AST(ast.declarations),
								                kind: ast.kind,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "VariableDeclarator":
											return new AST.VariableDeclarator ({
												type: ast.type,
												id: ast.id,
								                init: ast.init,
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "WhileStatement":
											return new AST.WhileStatement ({
												type: ast.type,
												test: AST(ast.test),
								                body: AST(ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});
											
										case "WithStatement":
											return new AST.WithStatement ({
												type: ast.type,
												object: AST(ast.object),
												body: AST (ast.body),
								                start: ast.range[0],
								                end: ast.range[1]
											});

										default:
											console.log(ast);
											console.log("No Type:" + ast.type + ", ast=" + ast);
									}
								};

								AST.ArrayExpression = function (params) {
									this.type = params.type;
								    this.elements = params.elements;
								    
									this.start = params.start;
								    this.end = params.end;

								    
								    this.toString = function () {
										return this.type;
									};
								};

								AST.AssignmentExpression = function (params) {
									this.type = params.type;
									this.operator = params.operator;
									this.left = params.left;
									this.right = params.right;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.BinaryExpression = function (params) {
									this.type = params.type;
									this.operator = params.operator;
									this.left = params.left;
									this.right = params.right;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.left.toString () + " " + this.operator + " " + this.right.toString ();
									};
								};

								AST.BlockStatement = function (params) {
									this.type = params.type;
									this.body = params.body;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.body.toString ();
									};
								};

								AST.BreakStatement = function (params) {
									this.type = params.type;
									this.label = params.label;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.CallExpression = function (params) {
									this.type = params.type;
									this.callee = params.callee;
									this.arguments = params.arguments;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.CatchClause = function (params) {
									this.type = params.type;
									this.param = params.param;
									this.body = params.body;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.ConditionalExpression = function (params) {
									this.type = params.type;
									this.test = params.test;
									this.consequent = params.consequent;
									this.alternate = params.alternate;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.ContinueStatement = function (params) {
									this.type = params.type;
									this.label = params.label;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.DebuggerStatement = function (params) {
									this.type = params.type;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.DoWhileStatement = function (params) {
									this.type = params.type;
									this.body = params.body;
									this.test = params.test;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.EmptyStatement = function (params) {
									this.type = params.type;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return "";
									};
								};

								AST.ExpressionStatement = function (params) {
									this.type = params.type;
									this.expression = params.expression;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.expression.toString ();
									};
								};

								AST.ForStatement = function (params) {
									this.type = params.type;
									this.init = params.init;
									this.test = params.test;
									this.update = params.update;
									this.body = params.body;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.ForInStatement = function (params) {
									this.type = params.type;
									this.left = params.left;
									this.right = params.right;
									this.body = params.body;
									this.each = params.each;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.FunctionDeclaration = function (params) {
									this.type = params.type;
									this.id = params.id;
									this.params = params.params;
									this.defaults = params.defaults;
									this.body = params.body;
									this.rest = params.rest;
									this.generator = params.generator;
									this.expression = params.expression;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										var result = "function " + this.id.toString ();
										
										var args;
										for (p in this.params) {
											if (args) {
												args += ", " + this.params[p].toString ();
											}
											else {
												args = this.params[p].toString ();
											}
										};
										
										result += " (" + args + ") {\n" + this.body.toString() + "\n};\n";
										
										return result;
									};
								};

								AST.FunctionExpression = function (params) {
									this.type = params.type;
									this.id = params.id;
									this.params = params.params;
									this.defaults = params.defaults;
									this.body = params.body;
									this.rest = params.rest;
									this.generator = params.generator;
									this.expression = params.expression;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.Identifier = function (params) {
									this.type = params.type;
									this.name = params.name;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.name;
									};
								};

								AST.IfStatement = function (params) {
									this.type = params.type;
									this.test = params.test;
									this.consequent = params.consequent;
									this.alternate = params.alternate;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return "if (" + this.test.toString () + ") {"+this.consequent.toString ()+"}" + (this.alternate?" else {" + this.alternate + "}":"");
									};
								};

								AST.LabeledStatement = function (params) {
									this.type = params.type;
									this.label = params.label;
									this.body = params.body;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.Literal = function (params) {
									this.type = params.type;
									this.value = params.value;
									this.raw = params.raw;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.value.toString ();
									};
								};

								AST.MemberExpression = function (params) {
									this.type = params.type;
									this.computed = params.computed;
									this.object = params.object;
									this.property = params.property;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.NewExpression = function (params) {
									this.type = params.type;
									this.callee = params.callee;
									this.arguments = params.arguments;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.ObjectExpression = function (params) {
									this.type = params.type;
									this.properties = params.properties;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.PostfixExpression = function (params) {
									this.type = params.type;
									this.operator = params.operator;
									this.argument = params.argument;
									this.prefix = params.prefix;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.Program = function (params) {
									this.type = params.type;
									this.body = params.body;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										var result;
										for (var b in this.body) {
											if (!result) {
												result = this.body[b].toString ();
											}
											else {
												result += ";\n" + this.body[b].toString ();
											}
											
										}

										return result;
									};
								};

								AST.Property = function (params) {
									this.type = params.type;
									this.key = params.key;
									this.value = params.value;
									this.kind = params.kind;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.ReturnStatement = function (params) {
									this.type = params.type;
									this.argument = params.argument;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return "return " + this.argument.toString ();
									};
								};

								AST.SequenceExpression = function (params) {
									this.type = params.type;
									this.expressions = params.expressions;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.SwitchCase = function (params) {
									this.type = params.type;
									this.test = params.test;
									this.consequent = params.consequent;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return "case " + this.test + ": " + this.consequent + ";";
									};
								};

								AST.SwitchStatement = function (params) {
									this.type = params.type;
									this.discriminant = params.discriminant;
									this.cases = params.cases;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										var result = "switch (" + this.discriminant.toString () + ") {";
										var cases = "";
										for (var c in this.cases) {
											var cond = this.cases[c];
											
											cases += cond.toString ();
										}
										
										result += cases + "}";
										return result;
									};
								};

								AST.ThisExpression = function (params) {
									this.type = params.type;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.ThrowStatement = function (params) {
									this.type = params.type;
									this.argument = params.argument;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.TryStatement = function (params) {
									this.type = params.type;
									this.block = params.block;
									this.guardedHandlers = params.guardedHandlers;
									this.handlers = params.handlers;
									this.finalizer = params.finalizer;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};	
								};

								AST.UnaryExpression = function (params) {
									this.type = params.type;
									this.operator = params.operator;
									this.argument = params.argument;
									this.prefix = params.prefix;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.operator + this.argument;
									};
								};

								AST.VariableDeclaration = function (params) {
									this.type = params.type;
									this.declarations = params.declarations;
									this.kind = params.kind;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return "var " + this.declarations.toString ();
									};
								};

								AST.VariableDeclarator = function (params) {
									this.type = params.type;
									this.id = params.id;
									this.init = params.init;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.id.toString () + " = " + this.init.toString ();
									};
								};

								AST.WhileStatement = function (params) {
									this.type = params.type;
									this.test = params.test;
									this.body = params.body;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.WithStatement = function (params) {
									this.type = params.type;
									this.object = params.object;
									this.body = params.body;

									this.start = params.start;
								    this.end = params.end;
									
									this.toString = function () {
										return this.type;
									};
								};

								AST.parse = function (code) {
									return AST(esprima.parse(code, {range: true}));
								};

								/* =====================================
								 * AST convertion to Lambda Strings:
								 */
								AST.ArrayExpression.prototype.toLambda = function () {
									return this.type;
								};

								AST.AssignmentExpression.prototype.toLambda = function () {
									return this.type;
								};

								AST.BinaryExpression.prototype.toLambda = function () {
									return "(" + this.operator + " " + this.left.toLambda () + " " + this.right.toLambda () + ")"; 
								};

								AST.BlockStatement.prototype.toLambda = function () {
									var result;

									for (var b in this.body) {
										if (!result) {
											result = this.body[b].toLambda ();
										}
										else {
											result += ";\n" + this.body[b].toLambda ();
										}
									}
										
									return result;
								};

								AST.BreakStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.CallExpression.prototype.toLambda = function () {
									var params = "";
									for (var i in this.arguments) {
										params += " " + this.arguments[i].toLambda(""); 
									}
									return "(" + this.callee + params + ")";
								};

								AST.CatchClause.prototype.toLambda = function () {
									return this.type
								};

								AST.ConditionalExpression.prototype.toLambda = function () {
									return this.type
								};

								AST.ContinueStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.DebuggerStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.DoWhileStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.EmptyStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.ExpressionStatement.prototype.toLambda = function () {
									return this.expression.toLambda ();
								};

								AST.ForStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.ForInStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.FunctionDeclaration.prototype.toLambda = function () {	
									var args ="fixpoint $" + this.id.toString () + ".";
									for (p in this.params) {
										args += "$" + this.params[p].toLambda () + ".";
									};
									
									// args = args || "$_.";

									var result = args + " " + this.body.toLambda ();

									return result;
								};

								AST.FunctionExpression.prototype.toLambda = function () {
									return this.type
								};

								AST.Identifier.prototype.toLambda = function () {
									return this.name;
								};

								AST.IfStatement.prototype.toLambda = function () {
									return "(" + this.test.toLambda()+" "
									       + this.consequent.toLambda()+" "
									       +(this.alternate?this.alternate.toLambda():"Undefined")
									       +")";
								};

								AST.LabeledStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.Literal.prototype.toLambda = function () {
									// TODO: support other types like strings, ...
									// IF NAT:
									var result = "x";
									for (var i=1; i<= this.value; i++) {
										result = "f ("+result+")";
									}
										
									result = "($f.$x." + result+")";
									return result;
								};

								AST.MemberExpression.prototype.toLambda = function () {
									return this.type
								};

								AST.NewExpression.prototype.toLambda = function () {
									return this.type
								};

								AST.ObjectExpression.prototype.toLambda = function () {
									return this.type
								};

								AST.PostfixExpression.prototype.toLambda = function () {
									return this.type
								};

								AST.Program.prototype.toLambda = function () {
									var result;
									for (var b in this.body) {
										if (!result) {
											result = this.body[b].toLambda ();
										}
										else {
											result += ";\n" + this.body[b].toLambda ();
										}
									}

									/*result = 
										"($true.$false.\
										 ($isZero.$fixpoint.\n" + result + "\n)\n\
										   ($f.($x.f (x x)) ($x.f (x x)))\n\
										   ($n.n ($x.false) true)\n\
										 ) ($x.$y.x) ($x.$y.y)\
										";*/

									return result;
								};

								AST.Property.prototype.toLambda = function () {
									return this.type
								};

								AST.ReturnStatement.prototype.toLambda = function () {
									return this.argument.toLambda ();
								};

								AST.SequenceExpression.prototype.toLambda = function () {
									return this.type
								};

								AST.SwitchCase.prototype.toLambda = function () {
									return this.type
								};

								AST.SwitchStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.ThisExpression.prototype.toLambda = function () {
									return this.type
								};

								AST.ThrowStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.TryStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.UnaryExpression.prototype.toLambda = function () {
									return "(" + this.operator + " " + this.argument.toLambda () + ")";
								};

								AST.VariableDeclaration.prototype.toLambda = function () {
									var result = "var ";
									for (var v in this.declarations) {
										result += this.declarations[v].toLambda();
									}
									return result;
								};

								AST.VariableDeclarator.prototype.toLambda = function () {
									return this.id.toLambda () + " = " + this.init.toLambda ();
								};

								AST.WhileStatement.prototype.toLambda = function () {
									return this.type
								};

								AST.WithStatement.prototype.toLambda = function () {
									return this.type
								};


								module.exports = {
									parse: AST.parse
								};
							},
							"esprima.js": function (exports, module, require) {
								/*
								  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
								  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
								  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
								  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
								  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
								  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
								  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
								  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
								  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
								  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

								  Redistribution and use in source and binary forms, with or without
								  modification, are permitted provided that the following conditions are met:

								    * Redistributions of source code must retain the above copyright
								      notice, this list of conditions and the following disclaimer.
								    * Redistributions in binary form must reproduce the above copyright
								      notice, this list of conditions and the following disclaimer in the
								      documentation and/or other materials provided with the distribution.

								  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
								  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
								  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
								  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
								  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
								  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
								  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
								  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
								  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
								  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
								*/

								/*jslint bitwise:true plusplus:true */
								/*global esprima:true, define:true, exports:true, window: true,
								createLocationMarker: true,
								throwError: true, generateStatement: true, peek: true,
								parseAssignmentExpression: true, parseBlock: true, parseExpression: true,
								parseFunctionDeclaration: true, parseFunctionExpression: true,
								parseFunctionSourceElements: true, parseVariableIdentifier: true,
								parseLeftHandSideExpression: true,
								parseUnaryExpression: true,
								parseStatement: true, parseSourceElement: true */

								(function (root, factory) {
								    'use strict';

								    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
								    // Rhino, and plain browser loading.
								    if (typeof define === 'function' && define.amd) {
								        define(['exports'], factory);
								    } else if (typeof exports !== 'undefined') {
								        factory(exports);
								    } else {
								        factory((root.esprima = {}));
								    }
								}(this, function (exports) {
								    'use strict';

								    var Token,
								        TokenName,
								        FnExprTokens,
								        Syntax,
								        PropertyKind,
								        Messages,
								        Regex,
								        SyntaxTreeDelegate,
								        source,
								        strict,
								        index,
								        lineNumber,
								        lineStart,
								        length,
								        delegate,
								        lookahead,
								        state,
								        extra;

								    Token = {
								        BooleanLiteral: 1,
								        EOF: 2,
								        Identifier: 3,
								        Keyword: 4,
								        NullLiteral: 5,
								        NumericLiteral: 6,
								        Punctuator: 7,
								        StringLiteral: 8,
								        RegularExpression: 9
								    };

								    TokenName = {};
								    TokenName[Token.BooleanLiteral] = 'Boolean';
								    TokenName[Token.EOF] = '<end>';
								    TokenName[Token.Identifier] = 'Identifier';
								    TokenName[Token.Keyword] = 'Keyword';
								    TokenName[Token.NullLiteral] = 'Null';
								    TokenName[Token.NumericLiteral] = 'Numeric';
								    TokenName[Token.Punctuator] = 'Punctuator';
								    TokenName[Token.StringLiteral] = 'String';
								    TokenName[Token.RegularExpression] = 'RegularExpression';

								    // A function following one of those tokens is an expression.
								    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
								                    'return', 'case', 'delete', 'throw', 'void',
								                    // assignment operators
								                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
								                    '&=', '|=', '^=', ',',
								                    // binary/unary operators
								                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
								                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
								                    '<=', '<', '>', '!=', '!=='];

								    Syntax = {
								        AssignmentExpression: 'AssignmentExpression',
								        ArrayExpression: 'ArrayExpression',
								        BlockStatement: 'BlockStatement',
								        BinaryExpression: 'BinaryExpression',
								        BreakStatement: 'BreakStatement',
								        CallExpression: 'CallExpression',
								        CatchClause: 'CatchClause',
								        ConditionalExpression: 'ConditionalExpression',
								        ContinueStatement: 'ContinueStatement',
								        DoWhileStatement: 'DoWhileStatement',
								        DebuggerStatement: 'DebuggerStatement',
								        EmptyStatement: 'EmptyStatement',
								        ExpressionStatement: 'ExpressionStatement',
								        ForStatement: 'ForStatement',
								        ForInStatement: 'ForInStatement',
								        FunctionDeclaration: 'FunctionDeclaration',
								        FunctionExpression: 'FunctionExpression',
								        Identifier: 'Identifier',
								        IfStatement: 'IfStatement',
								        Literal: 'Literal',
								        LabeledStatement: 'LabeledStatement',
								        LogicalExpression: 'LogicalExpression',
								        MemberExpression: 'MemberExpression',
								        NewExpression: 'NewExpression',
								        ObjectExpression: 'ObjectExpression',
								        Program: 'Program',
								        Property: 'Property',
								        ReturnStatement: 'ReturnStatement',
								        SequenceExpression: 'SequenceExpression',
								        SwitchStatement: 'SwitchStatement',
								        SwitchCase: 'SwitchCase',
								        ThisExpression: 'ThisExpression',
								        ThrowStatement: 'ThrowStatement',
								        TryStatement: 'TryStatement',
								        UnaryExpression: 'UnaryExpression',
								        UpdateExpression: 'UpdateExpression',
								        VariableDeclaration: 'VariableDeclaration',
								        VariableDeclarator: 'VariableDeclarator',
								        WhileStatement: 'WhileStatement',
								        WithStatement: 'WithStatement'
								    };

								    PropertyKind = {
								        Data: 1,
								        Get: 2,
								        Set: 4
								    };

								    // Error messages should be identical to V8.
								    Messages = {
								        UnexpectedToken:  'Unexpected token %0',
								        UnexpectedNumber:  'Unexpected number',
								        UnexpectedString:  'Unexpected string',
								        UnexpectedIdentifier:  'Unexpected identifier',
								        UnexpectedReserved:  'Unexpected reserved word',
								        UnexpectedEOS:  'Unexpected end of input',
								        NewlineAfterThrow:  'Illegal newline after throw',
								        InvalidRegExp: 'Invalid regular expression',
								        UnterminatedRegExp:  'Invalid regular expression: missing /',
								        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',
								        InvalidLHSInForIn:  'Invalid left-hand side in for-in',
								        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
								        NoCatchOrFinally:  'Missing catch or finally after try',
								        UnknownLabel: 'Undefined label \'%0\'',
								        Redeclaration: '%0 \'%1\' has already been declared',
								        IllegalContinue: 'Illegal continue statement',
								        IllegalBreak: 'Illegal break statement',
								        IllegalReturn: 'Illegal return statement',
								        StrictModeWith:  'Strict mode code may not include a with statement',
								        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',
								        StrictVarName:  'Variable name may not be eval or arguments in strict mode',
								        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',
								        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
								        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',
								        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',
								        StrictDelete:  'Delete of an unqualified identifier in strict mode.',
								        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',
								        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',
								        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',
								        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',
								        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',
								        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',
								        StrictReservedWord:  'Use of future reserved word in strict mode'
								    };

								    // See also tools/generate-unicode-regex.py.
								    Regex = {
								        NonAsciiIdentifierStart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]'),
								        NonAsciiIdentifierPart: new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]')
								    };

								    // Ensure the condition is true, otherwise throw an error.
								    // This is only to have a better contract semantic, i.e. another safety net
								    // to catch a logic error. The condition shall be fulfilled in normal case.
								    // Do NOT use this to enforce a certain condition on any user input.

								    function assert(condition, message) {
								        if (!condition) {
								            throw new Error('ASSERT: ' + message);
								        }
								    }

								    function isDecimalDigit(ch) {
								        return (ch >= 48 && ch <= 57);   // 0..9
								    }

								    function isHexDigit(ch) {
								        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
								    }

								    function isOctalDigit(ch) {
								        return '01234567'.indexOf(ch) >= 0;
								    }


								    // 7.2 White Space

								    function isWhiteSpace(ch) {
								        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
								            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
								    }

								    // 7.3 Line Terminators

								    function isLineTerminator(ch) {
								        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
								    }

								    // 7.6 Identifier Names and Identifiers

								    function isIdentifierStart(ch) {
								        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
								            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
								            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
								            (ch === 0x5C) ||                      // \ (backslash)
								            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
								    }

								    function isIdentifierPart(ch) {
								        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
								            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
								            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
								            (ch >= 0x30 && ch <= 0x39) ||         // 0..9
								            (ch === 0x5C) ||                      // \ (backslash)
								            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
								    }

								    // 7.6.1.2 Future Reserved Words

								    function isFutureReservedWord(id) {
								        switch (id) {
								        case 'class':
								        case 'enum':
								        case 'export':
								        case 'extends':
								        case 'import':
								        case 'super':
								            return true;
								        default:
								            return false;
								        }
								    }

								    function isStrictModeReservedWord(id) {
								        switch (id) {
								        case 'implements':
								        case 'interface':
								        case 'package':
								        case 'private':
								        case 'protected':
								        case 'public':
								        case 'static':
								        case 'yield':
								        case 'let':
								            return true;
								        default:
								            return false;
								        }
								    }

								    function isRestrictedWord(id) {
								        return id === 'eval' || id === 'arguments';
								    }

								    // 7.6.1.1 Keywords

								    function isKeyword(id) {
								        if (strict && isStrictModeReservedWord(id)) {
								            return true;
								        }

								        // 'const' is specialized as Keyword in V8.
								        // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.
								        // Some others are from future reserved words.

								        switch (id.length) {
								        case 2:
								            return (id === 'if') || (id === 'in') || (id === 'do');
								        case 3:
								            return (id === 'var') || (id === 'for') || (id === 'new') ||
								                (id === 'try') || (id === 'let');
								        case 4:
								            return (id === 'this') || (id === 'else') || (id === 'case') ||
								                (id === 'void') || (id === 'with') || (id === 'enum');
								        case 5:
								            return (id === 'while') || (id === 'break') || (id === 'catch') ||
								                (id === 'throw') || (id === 'const') || (id === 'yield') ||
								                (id === 'class') || (id === 'super');
								        case 6:
								            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
								                (id === 'switch') || (id === 'export') || (id === 'import');
								        case 7:
								            return (id === 'default') || (id === 'finally') || (id === 'extends');
								        case 8:
								            return (id === 'function') || (id === 'continue') || (id === 'debugger');
								        case 10:
								            return (id === 'instanceof');
								        default:
								            return false;
								        }
								    }

								    // 7.4 Comments

								    function addComment(type, value, start, end, loc) {
								        var comment, attacher;

								        assert(typeof start === 'number', 'Comment must have valid position');

								        // Because the way the actual token is scanned, often the comments
								        // (if any) are skipped twice during the lexical analysis.
								        // Thus, we need to skip adding a comment if the comment array already
								        // handled it.
								        if (state.lastCommentStart >= start) {
								            return;
								        }
								        state.lastCommentStart = start;

								        comment = {
								            type: type,
								            value: value
								        };
								        if (extra.range) {
								            comment.range = [start, end];
								        }
								        if (extra.loc) {
								            comment.loc = loc;
								        }
								        extra.comments.push(comment);

								        if (extra.attachComment) {
								            attacher = {
								                comment: comment,
								                leading: null,
								                trailing: null,
								                range: [start, end]
								            };
								            extra.pendingComments.push(attacher);
								        }
								    }

								    function skipSingleLineComment() {
								        var start, loc, ch, comment;

								        start = index - 2;
								        loc = {
								            start: {
								                line: lineNumber,
								                column: index - lineStart - 2
								            }
								        };

								        while (index < length) {
								            ch = source.charCodeAt(index);
								            ++index;
								            if (isLineTerminator(ch)) {
								                if (extra.comments) {
								                    comment = source.slice(start + 2, index - 1);
								                    loc.end = {
								                        line: lineNumber,
								                        column: index - lineStart - 1
								                    };
								                    addComment('Line', comment, start, index - 1, loc);
								                }
								                if (ch === 13 && source.charCodeAt(index) === 10) {
								                    ++index;
								                }
								                ++lineNumber;
								                lineStart = index;
								                return;
								            }
								        }

								        if (extra.comments) {
								            comment = source.slice(start + 2, index);
								            loc.end = {
								                line: lineNumber,
								                column: index - lineStart
								            };
								            addComment('Line', comment, start, index, loc);
								        }
								    }

								    function skipMultiLineComment() {
								        var start, loc, ch, comment;

								        if (extra.comments) {
								            start = index - 2;
								            loc = {
								                start: {
								                    line: lineNumber,
								                    column: index - lineStart - 2
								                }
								            };
								        }

								        while (index < length) {
								            ch = source.charCodeAt(index);
								            if (isLineTerminator(ch)) {
								                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
								                    ++index;
								                }
								                ++lineNumber;
								                ++index;
								                lineStart = index;
								                if (index >= length) {
								                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								                }
								            } else if (ch === 0x2A) {
								                // Block comment ends with '*/'.
								                if (source.charCodeAt(index + 1) === 0x2F) {
								                    ++index;
								                    ++index;
								                    if (extra.comments) {
								                        comment = source.slice(start + 2, index - 2);
								                        loc.end = {
								                            line: lineNumber,
								                            column: index - lineStart
								                        };
								                        addComment('Block', comment, start, index, loc);
								                    }
								                    return;
								                }
								                ++index;
								            } else {
								                ++index;
								            }
								        }

								        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								    }

								    function skipComment() {
								        var ch, start;

								        start = (index === 0);
								        while (index < length) {
								            ch = source.charCodeAt(index);

								            if (isWhiteSpace(ch)) {
								                ++index;
								            } else if (isLineTerminator(ch)) {
								                ++index;
								                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
								                    ++index;
								                }
								                ++lineNumber;
								                lineStart = index;
								                start = true;
								            } else if (ch === 0x2F) { // U+002F is '/'
								                ch = source.charCodeAt(index + 1);
								                if (ch === 0x2F) {
								                    ++index;
								                    ++index;
								                    skipSingleLineComment();
								                    start = true;
								                } else if (ch === 0x2A) {  // U+002A is '*'
								                    ++index;
								                    ++index;
								                    skipMultiLineComment();
								                } else {
								                    break;
								                }
								            } else if (start && ch === 0x2D) { // U+002D is '-'
								                // U+003E is '>'
								                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
								                    // '-->' is a single-line comment
								                    index += 3;
								                    skipSingleLineComment();
								                } else {
								                    break;
								                }
								            } else if (ch === 0x3C) { // U+003C is '<'
								                if (source.slice(index + 1, index + 4) === '!--') {
								                    ++index; // `<`
								                    ++index; // `!`
								                    ++index; // `-`
								                    ++index; // `-`
								                    skipSingleLineComment();
								                } else {
								                    break;
								                }
								            } else {
								                break;
								            }
								        }
								    }

								    function scanHexEscape(prefix) {
								        var i, len, ch, code = 0;

								        len = (prefix === 'u') ? 4 : 2;
								        for (i = 0; i < len; ++i) {
								            if (index < length && isHexDigit(source[index])) {
								                ch = source[index++];
								                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
								            } else {
								                return '';
								            }
								        }
								        return String.fromCharCode(code);
								    }

								    function getEscapedIdentifier() {
								        var ch, id;

								        ch = source.charCodeAt(index++);
								        id = String.fromCharCode(ch);

								        // '\u' (U+005C, U+0075) denotes an escaped character.
								        if (ch === 0x5C) {
								            if (source.charCodeAt(index) !== 0x75) {
								                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								            }
								            ++index;
								            ch = scanHexEscape('u');
								            if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
								                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								            }
								            id = ch;
								        }

								        while (index < length) {
								            ch = source.charCodeAt(index);
								            if (!isIdentifierPart(ch)) {
								                break;
								            }
								            ++index;
								            id += String.fromCharCode(ch);

								            // '\u' (U+005C, U+0075) denotes an escaped character.
								            if (ch === 0x5C) {
								                id = id.substr(0, id.length - 1);
								                if (source.charCodeAt(index) !== 0x75) {
								                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								                }
								                ++index;
								                ch = scanHexEscape('u');
								                if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
								                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								                }
								                id += ch;
								            }
								        }

								        return id;
								    }

								    function getIdentifier() {
								        var start, ch;

								        start = index++;
								        while (index < length) {
								            ch = source.charCodeAt(index);
								            if (ch === 0x5C) {
								                // Blackslash (U+005C) marks Unicode escape sequence.
								                index = start;
								                return getEscapedIdentifier();
								            }
								            if (isIdentifierPart(ch)) {
								                ++index;
								            } else {
								                break;
								            }
								        }

								        return source.slice(start, index);
								    }

								    function scanIdentifier() {
								        var start, id, type;

								        start = index;

								        // Backslash (U+005C) starts an escaped character.
								        id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();

								        // There is no keyword or literal with only one character.
								        // Thus, it must be an identifier.
								        if (id.length === 1) {
								            type = Token.Identifier;
								        } else if (isKeyword(id)) {
								            type = Token.Keyword;
								        } else if (id === 'null') {
								            type = Token.NullLiteral;
								        } else if (id === 'true' || id === 'false') {
								            type = Token.BooleanLiteral;
								        } else {
								            type = Token.Identifier;
								        }

								        return {
								            type: type,
								            value: id,
								            lineNumber: lineNumber,
								            lineStart: lineStart,
								            range: [start, index]
								        };
								    }


								    // 7.7 Punctuators

								    function scanPunctuator() {
								        var start = index,
								            code = source.charCodeAt(index),
								            code2,
								            ch1 = source[index],
								            ch2,
								            ch3,
								            ch4;

								        switch (code) {

								        // Check for most common single-character punctuators.
								        case 0x2E:  // . dot
								        case 0x28:  // ( open bracket
								        case 0x29:  // ) close bracket
								        case 0x3B:  // ; semicolon
								        case 0x2C:  // , comma
								        case 0x7B:  // { open curly brace
								        case 0x7D:  // } close curly brace
								        case 0x5B:  // [
								        case 0x5D:  // ]
								        case 0x3A:  // :
								        case 0x3F:  // ?
								        case 0x7E:  // ~
								            ++index;
								            if (extra.tokenize) {
								                if (code === 0x28) {
								                    extra.openParenToken = extra.tokens.length;
								                } else if (code === 0x7B) {
								                    extra.openCurlyToken = extra.tokens.length;
								                }
								            }
								            return {
								                type: Token.Punctuator,
								                value: String.fromCharCode(code),
								                lineNumber: lineNumber,
								                lineStart: lineStart,
								                range: [start, index]
								            };

								        default:
								            code2 = source.charCodeAt(index + 1);

								            // '=' (U+003D) marks an assignment or comparison operator.
								            if (code2 === 0x3D) {
								                switch (code) {
								                case 0x25:  // %
								                case 0x26:  // &
								                case 0x2A:  // *:
								                case 0x2B:  // +
								                case 0x2D:  // -
								                case 0x2F:  // /
								                case 0x3C:  // <
								                case 0x3E:  // >
								                case 0x5E:  // ^
								                case 0x7C:  // |
								                    index += 2;
								                    return {
								                        type: Token.Punctuator,
								                        value: String.fromCharCode(code) + String.fromCharCode(code2),
								                        lineNumber: lineNumber,
								                        lineStart: lineStart,
								                        range: [start, index]
								                    };

								                case 0x21: // !
								                case 0x3D: // =
								                    index += 2;

								                    // !== and ===
								                    if (source.charCodeAt(index) === 0x3D) {
								                        ++index;
								                    }
								                    return {
								                        type: Token.Punctuator,
								                        value: source.slice(start, index),
								                        lineNumber: lineNumber,
								                        lineStart: lineStart,
								                        range: [start, index]
								                    };
								                default:
								                    break;
								                }
								            }
								            break;
								        }

								        // Peek more characters.

								        ch2 = source[index + 1];
								        ch3 = source[index + 2];
								        ch4 = source[index + 3];

								        // 4-character punctuator: >>>=

								        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
								            if (ch4 === '=') {
								                index += 4;
								                return {
								                    type: Token.Punctuator,
								                    value: '>>>=',
								                    lineNumber: lineNumber,
								                    lineStart: lineStart,
								                    range: [start, index]
								                };
								            }
								        }

								        // 3-character punctuators: === !== >>> <<= >>=

								        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {
								            index += 3;
								            return {
								                type: Token.Punctuator,
								                value: '>>>',
								                lineNumber: lineNumber,
								                lineStart: lineStart,
								                range: [start, index]
								            };
								        }

								        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {
								            index += 3;
								            return {
								                type: Token.Punctuator,
								                value: '<<=',
								                lineNumber: lineNumber,
								                lineStart: lineStart,
								                range: [start, index]
								            };
								        }

								        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {
								            index += 3;
								            return {
								                type: Token.Punctuator,
								                value: '>>=',
								                lineNumber: lineNumber,
								                lineStart: lineStart,
								                range: [start, index]
								            };
								        }

								        // Other 2-character punctuators: ++ -- << >> && ||

								        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {
								            index += 2;
								            return {
								                type: Token.Punctuator,
								                value: ch1 + ch2,
								                lineNumber: lineNumber,
								                lineStart: lineStart,
								                range: [start, index]
								            };
								        }

								        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
								            ++index;
								            return {
								                type: Token.Punctuator,
								                value: ch1,
								                lineNumber: lineNumber,
								                lineStart: lineStart,
								                range: [start, index]
								            };
								        }

								        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								    }

								    // 7.8.3 Numeric Literals

								    function scanHexLiteral(start) {
								        var number = '';

								        while (index < length) {
								            if (!isHexDigit(source[index])) {
								                break;
								            }
								            number += source[index++];
								        }

								        if (number.length === 0) {
								            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								        }

								        if (isIdentifierStart(source.charCodeAt(index))) {
								            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								        }

								        return {
								            type: Token.NumericLiteral,
								            value: parseInt('0x' + number, 16),
								            lineNumber: lineNumber,
								            lineStart: lineStart,
								            range: [start, index]
								        };
								    }

								    function scanOctalLiteral(start) {
								        var number = '0' + source[index++];
								        while (index < length) {
								            if (!isOctalDigit(source[index])) {
								                break;
								            }
								            number += source[index++];
								        }

								        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
								            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								        }

								        return {
								            type: Token.NumericLiteral,
								            value: parseInt(number, 8),
								            octal: true,
								            lineNumber: lineNumber,
								            lineStart: lineStart,
								            range: [start, index]
								        };
								    }

								    function scanNumericLiteral() {
								        var number, start, ch;

								        ch = source[index];
								        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
								            'Numeric literal must start with a decimal digit or a decimal point');

								        start = index;
								        number = '';
								        if (ch !== '.') {
								            number = source[index++];
								            ch = source[index];

								            // Hex number starts with '0x'.
								            // Octal number starts with '0'.
								            if (number === '0') {
								                if (ch === 'x' || ch === 'X') {
								                    ++index;
								                    return scanHexLiteral(start);
								                }
								                if (isOctalDigit(ch)) {
								                    return scanOctalLiteral(start);
								                }

								                // decimal number starts with '0' such as '09' is illegal.
								                if (ch && isDecimalDigit(ch.charCodeAt(0))) {
								                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								                }
								            }

								            while (isDecimalDigit(source.charCodeAt(index))) {
								                number += source[index++];
								            }
								            ch = source[index];
								        }

								        if (ch === '.') {
								            number += source[index++];
								            while (isDecimalDigit(source.charCodeAt(index))) {
								                number += source[index++];
								            }
								            ch = source[index];
								        }

								        if (ch === 'e' || ch === 'E') {
								            number += source[index++];

								            ch = source[index];
								            if (ch === '+' || ch === '-') {
								                number += source[index++];
								            }
								            if (isDecimalDigit(source.charCodeAt(index))) {
								                while (isDecimalDigit(source.charCodeAt(index))) {
								                    number += source[index++];
								                }
								            } else {
								                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								            }
								        }

								        if (isIdentifierStart(source.charCodeAt(index))) {
								            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								        }

								        return {
								            type: Token.NumericLiteral,
								            value: parseFloat(number),
								            lineNumber: lineNumber,
								            lineStart: lineStart,
								            range: [start, index]
								        };
								    }

								    // 7.8.4 String Literals

								    function scanStringLiteral() {
								        var str = '', quote, start, ch, code, unescaped, restore, octal = false;

								        quote = source[index];
								        assert((quote === '\'' || quote === '"'),
								            'String literal must starts with a quote');

								        start = index;
								        ++index;

								        while (index < length) {
								            ch = source[index++];

								            if (ch === quote) {
								                quote = '';
								                break;
								            } else if (ch === '\\') {
								                ch = source[index++];
								                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
								                    switch (ch) {
								                    case 'n':
								                        str += '\n';
								                        break;
								                    case 'r':
								                        str += '\r';
								                        break;
								                    case 't':
								                        str += '\t';
								                        break;
								                    case 'u':
								                    case 'x':
								                        restore = index;
								                        unescaped = scanHexEscape(ch);
								                        if (unescaped) {
								                            str += unescaped;
								                        } else {
								                            index = restore;
								                            str += ch;
								                        }
								                        break;
								                    case 'b':
								                        str += '\b';
								                        break;
								                    case 'f':
								                        str += '\f';
								                        break;
								                    case 'v':
								                        str += '\x0B';
								                        break;

								                    default:
								                        if (isOctalDigit(ch)) {
								                            code = '01234567'.indexOf(ch);

								                            // \0 is not octal escape sequence
								                            if (code !== 0) {
								                                octal = true;
								                            }

								                            if (index < length && isOctalDigit(source[index])) {
								                                octal = true;
								                                code = code * 8 + '01234567'.indexOf(source[index++]);

								                                // 3 digits are only allowed when string starts
								                                // with 0, 1, 2, 3
								                                if ('0123'.indexOf(ch) >= 0 &&
								                                        index < length &&
								                                        isOctalDigit(source[index])) {
								                                    code = code * 8 + '01234567'.indexOf(source[index++]);
								                                }
								                            }
								                            str += String.fromCharCode(code);
								                        } else {
								                            str += ch;
								                        }
								                        break;
								                    }
								                } else {
								                    ++lineNumber;
								                    if (ch ===  '\r' && source[index] === '\n') {
								                        ++index;
								                    }
								                }
								            } else if (isLineTerminator(ch.charCodeAt(0))) {
								                break;
								            } else {
								                str += ch;
								            }
								        }

								        if (quote !== '') {
								            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
								        }

								        return {
								            type: Token.StringLiteral,
								            value: str,
								            octal: octal,
								            lineNumber: lineNumber,
								            lineStart: lineStart,
								            range: [start, index]
								        };
								    }

								    function scanRegExp() {
								        var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;

								        lookahead = null;
								        skipComment();

								        start = index;
								        ch = source[index];
								        assert(ch === '/', 'Regular expression literal must start with a slash');
								        str = source[index++];

								        while (index < length) {
								            ch = source[index++];
								            str += ch;
								            if (ch === '\\') {
								                ch = source[index++];
								                // ECMA-262 7.8.5
								                if (isLineTerminator(ch.charCodeAt(0))) {
								                    throwError({}, Messages.UnterminatedRegExp);
								                }
								                str += ch;
								            } else if (isLineTerminator(ch.charCodeAt(0))) {
								                throwError({}, Messages.UnterminatedRegExp);
								            } else if (classMarker) {
								                if (ch === ']') {
								                    classMarker = false;
								                }
								            } else {
								                if (ch === '/') {
								                    terminated = true;
								                    break;
								                } else if (ch === '[') {
								                    classMarker = true;
								                }
								            }
								        }

								        if (!terminated) {
								            throwError({}, Messages.UnterminatedRegExp);
								        }

								        // Exclude leading and trailing slash.
								        pattern = str.substr(1, str.length - 2);

								        flags = '';
								        while (index < length) {
								            ch = source[index];
								            if (!isIdentifierPart(ch.charCodeAt(0))) {
								                break;
								            }

								            ++index;
								            if (ch === '\\' && index < length) {
								                ch = source[index];
								                if (ch === 'u') {
								                    ++index;
								                    restore = index;
								                    ch = scanHexEscape('u');
								                    if (ch) {
								                        flags += ch;
								                        for (str += '\\u'; restore < index; ++restore) {
								                            str += source[restore];
								                        }
								                    } else {
								                        index = restore;
								                        flags += 'u';
								                        str += '\\u';
								                    }
								                } else {
								                    str += '\\';
								                }
								            } else {
								                flags += ch;
								                str += ch;
								            }
								        }

								        try {
								            value = new RegExp(pattern, flags);
								        } catch (e) {
								            throwError({}, Messages.InvalidRegExp);
								        }



								        if (extra.tokenize) {
								            return {
								                type: Token.RegularExpression,
								                value: value,
								                lineNumber: lineNumber,
								                lineStart: lineStart,
								                range: [start, index]
								            };
								        }
								        return {
								            literal: str,
								            value: value,
								            range: [start, index]
								        };
								    }

								    function collectRegex() {
								        var pos, loc, regex, token;

								        skipComment();

								        pos = index;
								        loc = {
								            start: {
								                line: lineNumber,
								                column: index - lineStart
								            }
								        };

								        regex = scanRegExp();
								        loc.end = {
								            line: lineNumber,
								            column: index - lineStart
								        };

								        if (!extra.tokenize) {
								            // Pop the previous token, which is likely '/' or '/='
								            if (extra.tokens.length > 0) {
								                token = extra.tokens[extra.tokens.length - 1];
								                if (token.range[0] === pos && token.type === 'Punctuator') {
								                    if (token.value === '/' || token.value === '/=') {
								                        extra.tokens.pop();
								                    }
								                }
								            }

								            extra.tokens.push({
								                type: 'RegularExpression',
								                value: regex.literal,
								                range: [pos, index],
								                loc: loc
								            });
								        }

								        return regex;
								    }

								    function isIdentifierName(token) {
								        return token.type === Token.Identifier ||
								            token.type === Token.Keyword ||
								            token.type === Token.BooleanLiteral ||
								            token.type === Token.NullLiteral;
								    }

								    function advanceSlash() {
								        var prevToken,
								            checkToken;
								        // Using the following algorithm:
								        // https://github.com/mozilla/sweet.js/wiki/design
								        prevToken = extra.tokens[extra.tokens.length - 1];
								        if (!prevToken) {
								            // Nothing before that: it cannot be a division.
								            return collectRegex();
								        }
								        if (prevToken.type === 'Punctuator') {
								            if (prevToken.value === ')') {
								                checkToken = extra.tokens[extra.openParenToken - 1];
								                if (checkToken &&
								                        checkToken.type === 'Keyword' &&
								                        (checkToken.value === 'if' ||
								                         checkToken.value === 'while' ||
								                         checkToken.value === 'for' ||
								                         checkToken.value === 'with')) {
								                    return collectRegex();
								                }
								                return scanPunctuator();
								            }
								            if (prevToken.value === '}') {
								                // Dividing a function by anything makes little sense,
								                // but we have to check for that.
								                if (extra.tokens[extra.openCurlyToken - 3] &&
								                        extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {
								                    // Anonymous function.
								                    checkToken = extra.tokens[extra.openCurlyToken - 4];
								                    if (!checkToken) {
								                        return scanPunctuator();
								                    }
								                } else if (extra.tokens[extra.openCurlyToken - 4] &&
								                        extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {
								                    // Named function.
								                    checkToken = extra.tokens[extra.openCurlyToken - 5];
								                    if (!checkToken) {
								                        return collectRegex();
								                    }
								                } else {
								                    return scanPunctuator();
								                }
								                // checkToken determines whether the function is
								                // a declaration or an expression.
								                if (FnExprTokens.indexOf(checkToken.value) >= 0) {
								                    // It is an expression.
								                    return scanPunctuator();
								                }
								                // It is a declaration.
								                return collectRegex();
								            }
								            return collectRegex();
								        }
								        if (prevToken.type === 'Keyword') {
								            return collectRegex();
								        }
								        return scanPunctuator();
								    }

								    function advance() {
								        var ch;

								        skipComment();

								        if (index >= length) {
								            return {
								                type: Token.EOF,
								                lineNumber: lineNumber,
								                lineStart: lineStart,
								                range: [index, index]
								            };
								        }

								        ch = source.charCodeAt(index);

								        // Very common: ( and ) and ;
								        if (ch === 0x28 || ch === 0x29 || ch === 0x3A) {
								            return scanPunctuator();
								        }

								        // String literal starts with single quote (U+0027) or double quote (U+0022).
								        if (ch === 0x27 || ch === 0x22) {
								            return scanStringLiteral();
								        }

								        if (isIdentifierStart(ch)) {
								            return scanIdentifier();
								        }

								        // Dot (.) U+002E can also start a floating-point number, hence the need
								        // to check the next character.
								        if (ch === 0x2E) {
								            if (isDecimalDigit(source.charCodeAt(index + 1))) {
								                return scanNumericLiteral();
								            }
								            return scanPunctuator();
								        }

								        if (isDecimalDigit(ch)) {
								            return scanNumericLiteral();
								        }

								        // Slash (/) U+002F can also start a regex.
								        if (extra.tokenize && ch === 0x2F) {
								            return advanceSlash();
								        }

								        return scanPunctuator();
								    }

								    function collectToken() {
								        var start, loc, token, range, value;

								        skipComment();
								        start = index;
								        loc = {
								            start: {
								                line: lineNumber,
								                column: index - lineStart
								            }
								        };

								        token = advance();
								        loc.end = {
								            line: lineNumber,
								            column: index - lineStart
								        };

								        if (token.type !== Token.EOF) {
								            range = [token.range[0], token.range[1]];
								            value = source.slice(token.range[0], token.range[1]);
								            extra.tokens.push({
								                type: TokenName[token.type],
								                value: value,
								                range: range,
								                loc: loc
								            });
								        }

								        return token;
								    }

								    function lex() {
								        var token;

								        token = lookahead;
								        index = token.range[1];
								        lineNumber = token.lineNumber;
								        lineStart = token.lineStart;

								        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();

								        index = token.range[1];
								        lineNumber = token.lineNumber;
								        lineStart = token.lineStart;

								        return token;
								    }

								    function peek() {
								        var pos, line, start;

								        pos = index;
								        line = lineNumber;
								        start = lineStart;
								        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
								        index = pos;
								        lineNumber = line;
								        lineStart = start;
								    }

								    SyntaxTreeDelegate = {

								        name: 'SyntaxTree',

								        markStart: function () {
								            if (extra.loc) {
								                state.markerStack.push(index - lineStart);
								                state.markerStack.push(lineNumber);
								            }
								            if (extra.range) {
								                state.markerStack.push(index);
								            }
								        },

								        processComment: function (node) {
								            var i, attacher, pos, len, candidate;

								            if (typeof node.type === 'undefined' || node.type === Syntax.Program) {
								                return;
								            }

								            // Check for possible additional trailing comments.
								            peek();

								            for (i = 0; i < extra.pendingComments.length; ++i) {
								                attacher = extra.pendingComments[i];
								                if (node.range[0] >= attacher.comment.range[1]) {
								                    candidate = attacher.leading;
								                    if (candidate) {
								                        pos = candidate.range[0];
								                        len = candidate.range[1] - pos;
								                        if (node.range[0] <= pos && (node.range[1] - node.range[0] >= len)) {
								                            attacher.leading = node;
								                        }
								                    } else {
								                        attacher.leading = node;
								                    }
								                }
								                if (node.range[1] <= attacher.comment.range[0]) {
								                    candidate = attacher.trailing;
								                    if (candidate) {
								                        pos = candidate.range[0];
								                        len = candidate.range[1] - pos;
								                        if (node.range[0] <= pos && (node.range[1] - node.range[0] >= len)) {
								                            attacher.trailing = node;
								                        }
								                    } else {
								                        attacher.trailing = node;
								                    }
								                }
								            }
								        },

								        markEnd: function (node) {
								            if (extra.range) {
								                node.range = [state.markerStack.pop(), index];
								            }
								            if (extra.loc) {
								                node.loc = {
								                    start: {
								                        line: state.markerStack.pop(),
								                        column: state.markerStack.pop()
								                    },
								                    end: {
								                        line: lineNumber,
								                        column: index - lineStart
								                    }
								                };
								                this.postProcess(node);
								            }
								            if (extra.attachComment) {
								                this.processComment(node);
								            }
								            return node;
								        },

								        markEndIf: function (node) {
								            if (node.range || node.loc) {
								                if (extra.loc) {
								                    state.markerStack.pop();
								                    state.markerStack.pop();
								                }
								                if (extra.range) {
								                    state.markerStack.pop();
								                }
								            } else {
								                this.markEnd(node);
								            }
								            return node;
								        },

								        postProcess: function (node) {
								            if (extra.source) {
								                node.loc.source = extra.source;
								            }
								            return node;
								        },

								        createArrayExpression: function (elements) {
								            return {
								                type: Syntax.ArrayExpression,
								                elements: elements
								            };
								        },

								        createAssignmentExpression: function (operator, left, right) {
								            return {
								                type: Syntax.AssignmentExpression,
								                operator: operator,
								                left: left,
								                right: right
								            };
								        },

								        createBinaryExpression: function (operator, left, right) {
								            var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :
								                        Syntax.BinaryExpression;
								            return {
								                type: type,
								                operator: operator,
								                left: left,
								                right: right
								            };
								        },

								        createBlockStatement: function (body) {
								            return {
								                type: Syntax.BlockStatement,
								                body: body
								            };
								        },

								        createBreakStatement: function (label) {
								            return {
								                type: Syntax.BreakStatement,
								                label: label
								            };
								        },

								        createCallExpression: function (callee, args) {
								            return {
								                type: Syntax.CallExpression,
								                callee: callee,
								                'arguments': args
								            };
								        },

								        createCatchClause: function (param, body) {
								            return {
								                type: Syntax.CatchClause,
								                param: param,
								                body: body
								            };
								        },

								        createConditionalExpression: function (test, consequent, alternate) {
								            return {
								                type: Syntax.ConditionalExpression,
								                test: test,
								                consequent: consequent,
								                alternate: alternate
								            };
								        },

								        createContinueStatement: function (label) {
								            return {
								                type: Syntax.ContinueStatement,
								                label: label
								            };
								        },

								        createDebuggerStatement: function () {
								            return {
								                type: Syntax.DebuggerStatement
								            };
								        },

								        createDoWhileStatement: function (body, test) {
								            return {
								                type: Syntax.DoWhileStatement,
								                body: body,
								                test: test
								            };
								        },

								        createEmptyStatement: function () {
								            return {
								                type: Syntax.EmptyStatement
								            };
								        },

								        createExpressionStatement: function (expression) {
								            return {
								                type: Syntax.ExpressionStatement,
								                expression: expression
								            };
								        },

								        createForStatement: function (init, test, update, body) {
								            return {
								                type: Syntax.ForStatement,
								                init: init,
								                test: test,
								                update: update,
								                body: body
								            };
								        },

								        createForInStatement: function (left, right, body) {
								            return {
								                type: Syntax.ForInStatement,
								                left: left,
								                right: right,
								                body: body,
								                each: false
								            };
								        },

								        createFunctionDeclaration: function (id, params, defaults, body) {
								            return {
								                type: Syntax.FunctionDeclaration,
								                id: id,
								                params: params,
								                defaults: defaults,
								                body: body,
								                rest: null,
								                generator: false,
								                expression: false
								            };
								        },

								        createFunctionExpression: function (id, params, defaults, body) {
								            return {
								                type: Syntax.FunctionExpression,
								                id: id,
								                params: params,
								                defaults: defaults,
								                body: body,
								                rest: null,
								                generator: false,
								                expression: false
								            };
								        },

								        createIdentifier: function (name) {
								            return {
								                type: Syntax.Identifier,
								                name: name
								            };
								        },

								        createIfStatement: function (test, consequent, alternate) {
								            return {
								                type: Syntax.IfStatement,
								                test: test,
								                consequent: consequent,
								                alternate: alternate
								            };
								        },

								        createLabeledStatement: function (label, body) {
								            return {
								                type: Syntax.LabeledStatement,
								                label: label,
								                body: body
								            };
								        },

								        createLiteral: function (token) {
								            return {
								                type: Syntax.Literal,
								                value: token.value,
								                raw: source.slice(token.range[0], token.range[1])
								            };
								        },

								        createMemberExpression: function (accessor, object, property) {
								            return {
								                type: Syntax.MemberExpression,
								                computed: accessor === '[',
								                object: object,
								                property: property
								            };
								        },

								        createNewExpression: function (callee, args) {
								            return {
								                type: Syntax.NewExpression,
								                callee: callee,
								                'arguments': args
								            };
								        },

								        createObjectExpression: function (properties) {
								            return {
								                type: Syntax.ObjectExpression,
								                properties: properties
								            };
								        },

								        createPostfixExpression: function (operator, argument) {
								            return {
								                type: Syntax.UpdateExpression,
								                operator: operator,
								                argument: argument,
								                prefix: false
								            };
								        },

								        createProgram: function (body) {
								            return {
								                type: Syntax.Program,
								                body: body
								            };
								        },

								        createProperty: function (kind, key, value) {
								            return {
								                type: Syntax.Property,
								                key: key,
								                value: value,
								                kind: kind
								            };
								        },

								        createReturnStatement: function (argument) {
								            return {
								                type: Syntax.ReturnStatement,
								                argument: argument
								            };
								        },

								        createSequenceExpression: function (expressions) {
								            return {
								                type: Syntax.SequenceExpression,
								                expressions: expressions
								            };
								        },

								        createSwitchCase: function (test, consequent) {
								            return {
								                type: Syntax.SwitchCase,
								                test: test,
								                consequent: consequent
								            };
								        },

								        createSwitchStatement: function (discriminant, cases) {
								            return {
								                type: Syntax.SwitchStatement,
								                discriminant: discriminant,
								                cases: cases
								            };
								        },

								        createThisExpression: function () {
								            return {
								                type: Syntax.ThisExpression
								            };
								        },

								        createThrowStatement: function (argument) {
								            return {
								                type: Syntax.ThrowStatement,
								                argument: argument
								            };
								        },

								        createTryStatement: function (block, guardedHandlers, handlers, finalizer) {
								            return {
								                type: Syntax.TryStatement,
								                block: block,
								                guardedHandlers: guardedHandlers,
								                handlers: handlers,
								                finalizer: finalizer
								            };
								        },

								        createUnaryExpression: function (operator, argument) {
								            if (operator === '++' || operator === '--') {
								                return {
								                    type: Syntax.UpdateExpression,
								                    operator: operator,
								                    argument: argument,
								                    prefix: true
								                };
								            }
								            return {
								                type: Syntax.UnaryExpression,
								                operator: operator,
								                argument: argument,
								                prefix: true
								            };
								        },

								        createVariableDeclaration: function (declarations, kind) {
								            return {
								                type: Syntax.VariableDeclaration,
								                declarations: declarations,
								                kind: kind
								            };
								        },

								        createVariableDeclarator: function (id, init) {
								            return {
								                type: Syntax.VariableDeclarator,
								                id: id,
								                init: init
								            };
								        },

								        createWhileStatement: function (test, body) {
								            return {
								                type: Syntax.WhileStatement,
								                test: test,
								                body: body
								            };
								        },

								        createWithStatement: function (object, body) {
								            return {
								                type: Syntax.WithStatement,
								                object: object,
								                body: body
								            };
								        }
								    };

								    // Return true if there is a line terminator before the next token.

								    function peekLineTerminator() {
								        var pos, line, start, found;

								        pos = index;
								        line = lineNumber;
								        start = lineStart;
								        skipComment();
								        found = lineNumber !== line;
								        index = pos;
								        lineNumber = line;
								        lineStart = start;

								        return found;
								    }

								    // Throw an exception

								    function throwError(token, messageFormat) {
								        var error,
								            args = Array.prototype.slice.call(arguments, 2),
								            msg = messageFormat.replace(
								                /%(\d)/g,
								                function (whole, index) {
								                    assert(index < args.length, 'Message reference must be in range');
								                    return args[index];
								                }
								            );

								        if (typeof token.lineNumber === 'number') {
								            error = new Error('Line ' + token.lineNumber + ': ' + msg);
								            error.index = token.range[0];
								            error.lineNumber = token.lineNumber;
								            error.column = token.range[0] - lineStart + 1;
								        } else {
								            error = new Error('Line ' + lineNumber + ': ' + msg);
								            error.index = index;
								            error.lineNumber = lineNumber;
								            error.column = index - lineStart + 1;
								        }

								        error.description = msg;
								        throw error;
								    }

								    function throwErrorTolerant() {
								        try {
								            throwError.apply(null, arguments);
								        } catch (e) {
								            if (extra.errors) {
								                extra.errors.push(e);
								            } else {
								                throw e;
								            }
								        }
								    }


								    // Throw an exception because of the token.

								    function throwUnexpected(token) {
								        if (token.type === Token.EOF) {
								            throwError(token, Messages.UnexpectedEOS);
								        }

								        if (token.type === Token.NumericLiteral) {
								            throwError(token, Messages.UnexpectedNumber);
								        }

								        if (token.type === Token.StringLiteral) {
								            throwError(token, Messages.UnexpectedString);
								        }

								        if (token.type === Token.Identifier) {
								            throwError(token, Messages.UnexpectedIdentifier);
								        }

								        if (token.type === Token.Keyword) {
								            if (isFutureReservedWord(token.value)) {
								                throwError(token, Messages.UnexpectedReserved);
								            } else if (strict && isStrictModeReservedWord(token.value)) {
								                throwErrorTolerant(token, Messages.StrictReservedWord);
								                return;
								            }
								            throwError(token, Messages.UnexpectedToken, token.value);
								        }

								        // BooleanLiteral, NullLiteral, or Punctuator.
								        throwError(token, Messages.UnexpectedToken, token.value);
								    }

								    // Expect the next token to match the specified punctuator.
								    // If not, an exception will be thrown.

								    function expect(value) {
								        var token = lex();
								        if (token.type !== Token.Punctuator || token.value !== value) {
								            throwUnexpected(token);
								        }
								    }

								    // Expect the next token to match the specified keyword.
								    // If not, an exception will be thrown.

								    function expectKeyword(keyword) {
								        var token = lex();
								        if (token.type !== Token.Keyword || token.value !== keyword) {
								            throwUnexpected(token);
								        }
								    }

								    // Return true if the next token matches the specified punctuator.

								    function match(value) {
								        return lookahead.type === Token.Punctuator && lookahead.value === value;
								    }

								    // Return true if the next token matches the specified keyword

								    function matchKeyword(keyword) {
								        return lookahead.type === Token.Keyword && lookahead.value === keyword;
								    }

								    // Return true if the next token is an assignment operator

								    function matchAssign() {
								        var op;

								        if (lookahead.type !== Token.Punctuator) {
								            return false;
								        }
								        op = lookahead.value;
								        return op === '=' ||
								            op === '*=' ||
								            op === '/=' ||
								            op === '%=' ||
								            op === '+=' ||
								            op === '-=' ||
								            op === '<<=' ||
								            op === '>>=' ||
								            op === '>>>=' ||
								            op === '&=' ||
								            op === '^=' ||
								            op === '|=';
								    }

								    function consumeSemicolon() {
								        var line;

								        // Catch the very common case first: immediately a semicolon (U+003B).
								        if (source.charCodeAt(index) === 0x3B) {
								            lex();
								            return;
								        }

								        line = lineNumber;
								        skipComment();
								        if (lineNumber !== line) {
								            return;
								        }

								        if (match(';')) {
								            lex();
								            return;
								        }

								        if (lookahead.type !== Token.EOF && !match('}')) {
								            throwUnexpected(lookahead);
								        }
								    }

								    // Return true if provided expression is LeftHandSideExpression

								    function isLeftHandSide(expr) {
								        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
								    }

								    // 11.1.4 Array Initialiser

								    function parseArrayInitialiser() {
								        var elements = [];

								        expect('[');

								        while (!match(']')) {
								            if (match(',')) {
								                lex();
								                elements.push(null);
								            } else {
								                elements.push(parseAssignmentExpression());

								                if (!match(']')) {
								                    expect(',');
								                }
								            }
								        }

								        expect(']');

								        return delegate.createArrayExpression(elements);
								    }

								    // 11.1.5 Object Initialiser

								    function parsePropertyFunction(param, first) {
								        var previousStrict, body;

								        previousStrict = strict;
								        skipComment();
								        delegate.markStart();
								        body = parseFunctionSourceElements();
								        if (first && strict && isRestrictedWord(param[0].name)) {
								            throwErrorTolerant(first, Messages.StrictParamName);
								        }
								        strict = previousStrict;
								        return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body));
								    }

								    function parseObjectPropertyKey() {
								        var token;

								        skipComment();
								        delegate.markStart();
								        token = lex();

								        // Note: This function is called only from parseObjectProperty(), where
								        // EOF and Punctuator tokens are already filtered out.

								        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
								            if (strict && token.octal) {
								                throwErrorTolerant(token, Messages.StrictOctalLiteral);
								            }
								            return delegate.markEnd(delegate.createLiteral(token));
								        }

								        return delegate.markEnd(delegate.createIdentifier(token.value));
								    }

								    function parseObjectProperty() {
								        var token, key, id, value, param;

								        token = lookahead;
								        skipComment();
								        delegate.markStart();

								        if (token.type === Token.Identifier) {

								            id = parseObjectPropertyKey();

								            // Property Assignment: Getter and Setter.

								            if (token.value === 'get' && !match(':')) {
								                key = parseObjectPropertyKey();
								                expect('(');
								                expect(')');
								                value = parsePropertyFunction([]);
								                return delegate.markEnd(delegate.createProperty('get', key, value));
								            }
								            if (token.value === 'set' && !match(':')) {
								                key = parseObjectPropertyKey();
								                expect('(');
								                token = lookahead;
								                if (token.type !== Token.Identifier) {
								                    expect(')');
								                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);
								                    value = parsePropertyFunction([]);
								                } else {
								                    param = [ parseVariableIdentifier() ];
								                    expect(')');
								                    value = parsePropertyFunction(param, token);
								                }
								                return delegate.markEnd(delegate.createProperty('set', key, value));
								            }
								            expect(':');
								            value = parseAssignmentExpression();
								            return delegate.markEnd(delegate.createProperty('init', id, value));
								        }
								        if (token.type === Token.EOF || token.type === Token.Punctuator) {
								            throwUnexpected(token);
								        } else {
								            key = parseObjectPropertyKey();
								            expect(':');
								            value = parseAssignmentExpression();
								            return delegate.markEnd(delegate.createProperty('init', key, value));
								        }
								    }

								    function parseObjectInitialiser() {
								        var properties = [], property, name, key, kind, map = {}, toString = String;

								        expect('{');

								        while (!match('}')) {
								            property = parseObjectProperty();

								            if (property.key.type === Syntax.Identifier) {
								                name = property.key.name;
								            } else {
								                name = toString(property.key.value);
								            }
								            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;

								            key = '$' + name;
								            if (Object.prototype.hasOwnProperty.call(map, key)) {
								                if (map[key] === PropertyKind.Data) {
								                    if (strict && kind === PropertyKind.Data) {
								                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);
								                    } else if (kind !== PropertyKind.Data) {
								                        throwErrorTolerant({}, Messages.AccessorDataProperty);
								                    }
								                } else {
								                    if (kind === PropertyKind.Data) {
								                        throwErrorTolerant({}, Messages.AccessorDataProperty);
								                    } else if (map[key] & kind) {
								                        throwErrorTolerant({}, Messages.AccessorGetSet);
								                    }
								                }
								                map[key] |= kind;
								            } else {
								                map[key] = kind;
								            }

								            properties.push(property);

								            if (!match('}')) {
								                expect(',');
								            }
								        }

								        expect('}');

								        return delegate.createObjectExpression(properties);
								    }

								    // 11.1.6 The Grouping Operator

								    function parseGroupExpression() {
								        var expr;

								        expect('(');

								        expr = parseExpression();

								        expect(')');

								        return expr;
								    }


								    // 11.1 Primary Expressions

								    function parsePrimaryExpression() {
								        var type, token, expr;

								        if (match('(')) {
								            return parseGroupExpression();
								        }

								        type = lookahead.type;
								        delegate.markStart();

								        if (type === Token.Identifier) {
								            expr =  delegate.createIdentifier(lex().value);
								        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
								            if (strict && lookahead.octal) {
								                throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);
								            }
								            expr = delegate.createLiteral(lex());
								        } else if (type === Token.Keyword) {
								            if (matchKeyword('this')) {
								                lex();
								                expr = delegate.createThisExpression();
								            } else if (matchKeyword('function')) {
								                expr = parseFunctionExpression();
								            }
								        } else if (type === Token.BooleanLiteral) {
								            token = lex();
								            token.value = (token.value === 'true');
								            expr = delegate.createLiteral(token);
								        } else if (type === Token.NullLiteral) {
								            token = lex();
								            token.value = null;
								            expr = delegate.createLiteral(token);
								        } else if (match('[')) {
								            expr = parseArrayInitialiser();
								        } else if (match('{')) {
								            expr = parseObjectInitialiser();
								        } else if (match('/') || match('/=')) {
								            if (typeof extra.tokens !== 'undefined') {
								                expr = delegate.createLiteral(collectRegex());
								            } else {
								                expr = delegate.createLiteral(scanRegExp());
								            }
								            peek();
								        }

								        if (expr) {
								            return delegate.markEnd(expr);
								        }

								        throwUnexpected(lex());
								    }

								    // 11.2 Left-Hand-Side Expressions

								    function parseArguments() {
								        var args = [];

								        expect('(');

								        if (!match(')')) {
								            while (index < length) {
								                args.push(parseAssignmentExpression());
								                if (match(')')) {
								                    break;
								                }
								                expect(',');
								            }
								        }

								        expect(')');

								        return args;
								    }

								    function parseNonComputedProperty() {
								        var token;

								        delegate.markStart();
								        token = lex();

								        if (!isIdentifierName(token)) {
								            throwUnexpected(token);
								        }

								        return delegate.markEnd(delegate.createIdentifier(token.value));
								    }

								    function parseNonComputedMember() {
								        expect('.');

								        return parseNonComputedProperty();
								    }

								    function parseComputedMember() {
								        var expr;

								        expect('[');

								        expr = parseExpression();

								        expect(']');

								        return expr;
								    }

								    function parseNewExpression() {
								        var callee, args;

								        delegate.markStart();
								        expectKeyword('new');
								        callee = parseLeftHandSideExpression();
								        args = match('(') ? parseArguments() : [];

								        return delegate.markEnd(delegate.createNewExpression(callee, args));
								    }

								    function parseLeftHandSideExpressionAllowCall() {
								        var marker, previousAllowIn, expr, args, property;

								        marker = createLocationMarker();

								        previousAllowIn = state.allowIn;
								        state.allowIn = true;
								        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
								        state.allowIn = previousAllowIn;

								        while (match('.') || match('[') || match('(')) {
								            if (match('(')) {
								                args = parseArguments();
								                expr = delegate.createCallExpression(expr, args);
								            } else if (match('[')) {
								                property = parseComputedMember();
								                expr = delegate.createMemberExpression('[', expr, property);
								            } else {
								                property = parseNonComputedMember();
								                expr = delegate.createMemberExpression('.', expr, property);
								            }
								            if (marker) {
								                marker.end();
								                marker.apply(expr);
								            }
								        }

								        return expr;
								    }

								    function parseLeftHandSideExpression() {
								        var marker, previousAllowIn, expr, property;

								        marker = createLocationMarker();

								        previousAllowIn = state.allowIn;
								        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
								        state.allowIn = previousAllowIn;

								        while (match('.') || match('[')) {
								            if (match('[')) {
								                property = parseComputedMember();
								                expr = delegate.createMemberExpression('[', expr, property);
								            } else {
								                property = parseNonComputedMember();
								                expr = delegate.createMemberExpression('.', expr, property);
								            }
								            if (marker) {
								                marker.end();
								                marker.apply(expr);
								            }
								        }

								        return expr;
								    }

								    // 11.3 Postfix Expressions

								    function parsePostfixExpression() {
								        var expr, token;

								        delegate.markStart();
								        expr = parseLeftHandSideExpressionAllowCall();

								        if (lookahead.type === Token.Punctuator) {
								            if ((match('++') || match('--')) && !peekLineTerminator()) {
								                // 11.3.1, 11.3.2
								                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
								                    throwErrorTolerant({}, Messages.StrictLHSPostfix);
								                }

								                if (!isLeftHandSide(expr)) {
								                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
								                }

								                token = lex();
								                expr = delegate.createPostfixExpression(token.value, expr);
								            }
								        }

								        return delegate.markEndIf(expr);
								    }

								    // 11.4 Unary Operators

								    function parseUnaryExpression() {
								        var token, expr;

								        delegate.markStart();

								        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
								            expr = parsePostfixExpression();
								        } else if (match('++') || match('--')) {
								            token = lex();
								            expr = parseUnaryExpression();
								            // 11.4.4, 11.4.5
								            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
								                throwErrorTolerant({}, Messages.StrictLHSPrefix);
								            }

								            if (!isLeftHandSide(expr)) {
								                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
								            }

								            expr = delegate.createUnaryExpression(token.value, expr);
								        } else if (match('+') || match('-') || match('~') || match('!')) {
								            token = lex();
								            expr = parseUnaryExpression();
								            expr = delegate.createUnaryExpression(token.value, expr);
								        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
								            token = lex();
								            expr = parseUnaryExpression();
								            expr = delegate.createUnaryExpression(token.value, expr);
								            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
								                throwErrorTolerant({}, Messages.StrictDelete);
								            }
								        } else {
								            expr = parsePostfixExpression();
								        }

								        return delegate.markEndIf(expr);
								    }

								    function binaryPrecedence(token, allowIn) {
								        var prec = 0;

								        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
								            return 0;
								        }

								        switch (token.value) {
								        case '||':
								            prec = 1;
								            break;

								        case '&&':
								            prec = 2;
								            break;

								        case '|':
								            prec = 3;
								            break;

								        case '^':
								            prec = 4;
								            break;

								        case '&':
								            prec = 5;
								            break;

								        case '==':
								        case '!=':
								        case '===':
								        case '!==':
								            prec = 6;
								            break;

								        case '<':
								        case '>':
								        case '<=':
								        case '>=':
								        case 'instanceof':
								            prec = 7;
								            break;

								        case 'in':
								            prec = allowIn ? 7 : 0;
								            break;

								        case '<<':
								        case '>>':
								        case '>>>':
								            prec = 8;
								            break;

								        case '+':
								        case '-':
								            prec = 9;
								            break;

								        case '*':
								        case '/':
								        case '%':
								            prec = 11;
								            break;

								        default:
								            break;
								        }

								        return prec;
								    }

								    // 11.5 Multiplicative Operators
								    // 11.6 Additive Operators
								    // 11.7 Bitwise Shift Operators
								    // 11.8 Relational Operators
								    // 11.9 Equality Operators
								    // 11.10 Binary Bitwise Operators
								    // 11.11 Binary Logical Operators

								    function parseBinaryExpression() {
								        var marker, markers, expr, token, prec, stack, right, operator, left, i;

								        marker = createLocationMarker();
								        left = parseUnaryExpression();

								        token = lookahead;
								        prec = binaryPrecedence(token, state.allowIn);
								        if (prec === 0) {
								            return left;
								        }
								        token.prec = prec;
								        lex();

								        markers = [marker, createLocationMarker()];
								        right = parseUnaryExpression();

								        stack = [left, token, right];

								        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

								            // Reduce: make a binary expression from the three topmost entries.
								            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
								                right = stack.pop();
								                operator = stack.pop().value;
								                left = stack.pop();
								                expr = delegate.createBinaryExpression(operator, left, right);
								                markers.pop();
								                marker = markers.pop();
								                if (marker) {
								                    marker.end();
								                    marker.apply(expr);
								                }
								                stack.push(expr);
								                markers.push(marker);
								            }

								            // Shift.
								            token = lex();
								            token.prec = prec;
								            stack.push(token);
								            markers.push(createLocationMarker());
								            expr = parseUnaryExpression();
								            stack.push(expr);
								        }

								        // Final reduce to clean-up the stack.
								        i = stack.length - 1;
								        expr = stack[i];
								        markers.pop();
								        while (i > 1) {
								            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
								            i -= 2;
								            marker = markers.pop();
								            if (marker) {
								                marker.end();
								                marker.apply(expr);
								            }
								        }

								        return expr;
								    }


								    // 11.12 Conditional Operator

								    function parseConditionalExpression() {
								        var expr, previousAllowIn, consequent, alternate;

								        delegate.markStart();
								        expr = parseBinaryExpression();

								        if (match('?')) {
								            lex();
								            previousAllowIn = state.allowIn;
								            state.allowIn = true;
								            consequent = parseAssignmentExpression();
								            state.allowIn = previousAllowIn;
								            expect(':');
								            alternate = parseAssignmentExpression();

								            expr = delegate.markEnd(delegate.createConditionalExpression(expr, consequent, alternate));
								        } else {
								            delegate.markEnd({});
								        }

								        return expr;
								    }

								    // 11.13 Assignment Operators

								    function parseAssignmentExpression() {
								        var token, left, right, node;

								        token = lookahead;
								        delegate.markStart();
								        node = left = parseConditionalExpression();

								        if (matchAssign()) {
								            // LeftHandSideExpression
								            if (!isLeftHandSide(left)) {
								                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
								            }

								            // 11.13.1
								            if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {
								                throwErrorTolerant(token, Messages.StrictLHSAssignment);
								            }

								            token = lex();
								            right = parseAssignmentExpression();
								            node = delegate.createAssignmentExpression(token.value, left, right);
								        }

								        return delegate.markEndIf(node);
								    }

								    // 11.14 Comma Operator

								    function parseExpression() {
								        var expr;

								        delegate.markStart();
								        expr = parseAssignmentExpression();

								        if (match(',')) {
								            expr = delegate.createSequenceExpression([ expr ]);

								            while (index < length) {
								                if (!match(',')) {
								                    break;
								                }
								                lex();
								                expr.expressions.push(parseAssignmentExpression());
								            }
								        }

								        return delegate.markEndIf(expr);
								    }

								    // 12.1 Block

								    function parseStatementList() {
								        var list = [],
								            statement;

								        while (index < length) {
								            if (match('}')) {
								                break;
								            }
								            statement = parseSourceElement();
								            if (typeof statement === 'undefined') {
								                break;
								            }
								            list.push(statement);
								        }

								        return list;
								    }

								    function parseBlock() {
								        var block;

								        skipComment();
								        delegate.markStart();
								        expect('{');

								        block = parseStatementList();

								        expect('}');

								        return delegate.markEnd(delegate.createBlockStatement(block));
								    }

								    // 12.2 Variable Statement

								    function parseVariableIdentifier() {
								        var token;

								        skipComment();
								        delegate.markStart();
								        token = lex();

								        if (token.type !== Token.Identifier) {
								            throwUnexpected(token);
								        }

								        return delegate.markEnd(delegate.createIdentifier(token.value));
								    }

								    function parseVariableDeclaration(kind) {
								        var init = null, id;

								        skipComment();
								        delegate.markStart();
								        id = parseVariableIdentifier();

								        // 12.2.1
								        if (strict && isRestrictedWord(id.name)) {
								            throwErrorTolerant({}, Messages.StrictVarName);
								        }

								        if (kind === 'const') {
								            expect('=');
								            init = parseAssignmentExpression();
								        } else if (match('=')) {
								            lex();
								            init = parseAssignmentExpression();
								        }

								        return delegate.markEnd(delegate.createVariableDeclarator(id, init));
								    }

								    function parseVariableDeclarationList(kind) {
								        var list = [];

								        do {
								            list.push(parseVariableDeclaration(kind));
								            if (!match(',')) {
								                break;
								            }
								            lex();
								        } while (index < length);

								        return list;
								    }

								    function parseVariableStatement() {
								        var declarations;

								        expectKeyword('var');

								        declarations = parseVariableDeclarationList();

								        consumeSemicolon();

								        return delegate.createVariableDeclaration(declarations, 'var');
								    }

								    // kind may be `const` or `let`
								    // Both are experimental and not in the specification yet.
								    // see http://wiki.ecmascript.org/doku.php?id=harmony:const
								    // and http://wiki.ecmascript.org/doku.php?id=harmony:let
								    function parseConstLetDeclaration(kind) {
								        var declarations;

								        skipComment();
								        delegate.markStart();

								        expectKeyword(kind);

								        declarations = parseVariableDeclarationList(kind);

								        consumeSemicolon();

								        return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind));
								    }

								    // 12.3 Empty Statement

								    function parseEmptyStatement() {
								        expect(';');
								        return delegate.createEmptyStatement();
								    }

								    // 12.4 Expression Statement

								    function parseExpressionStatement() {
								        var expr = parseExpression();
								        consumeSemicolon();
								        return delegate.createExpressionStatement(expr);
								    }

								    // 12.5 If statement

								    function parseIfStatement() {
								        var test, consequent, alternate;

								        expectKeyword('if');

								        expect('(');

								        test = parseExpression();

								        expect(')');

								        consequent = parseStatement();

								        if (matchKeyword('else')) {
								            lex();
								            alternate = parseStatement();
								        } else {
								            alternate = null;
								        }

								        return delegate.createIfStatement(test, consequent, alternate);
								    }

								    // 12.6 Iteration Statements

								    function parseDoWhileStatement() {
								        var body, test, oldInIteration;

								        expectKeyword('do');

								        oldInIteration = state.inIteration;
								        state.inIteration = true;

								        body = parseStatement();

								        state.inIteration = oldInIteration;

								        expectKeyword('while');

								        expect('(');

								        test = parseExpression();

								        expect(')');

								        if (match(';')) {
								            lex();
								        }

								        return delegate.createDoWhileStatement(body, test);
								    }

								    function parseWhileStatement() {
								        var test, body, oldInIteration;

								        expectKeyword('while');

								        expect('(');

								        test = parseExpression();

								        expect(')');

								        oldInIteration = state.inIteration;
								        state.inIteration = true;

								        body = parseStatement();

								        state.inIteration = oldInIteration;

								        return delegate.createWhileStatement(test, body);
								    }

								    function parseForVariableDeclaration() {
								        var token, declarations;

								        delegate.markStart();
								        token = lex();
								        declarations = parseVariableDeclarationList();

								        return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value));
								    }

								    function parseForStatement() {
								        var init, test, update, left, right, body, oldInIteration;

								        init = test = update = null;

								        expectKeyword('for');

								        expect('(');

								        if (match(';')) {
								            lex();
								        } else {
								            if (matchKeyword('var') || matchKeyword('let')) {
								                state.allowIn = false;
								                init = parseForVariableDeclaration();
								                state.allowIn = true;

								                if (init.declarations.length === 1 && matchKeyword('in')) {
								                    lex();
								                    left = init;
								                    right = parseExpression();
								                    init = null;
								                }
								            } else {
								                state.allowIn = false;
								                init = parseExpression();
								                state.allowIn = true;

								                if (matchKeyword('in')) {
								                    // LeftHandSideExpression
								                    if (!isLeftHandSide(init)) {
								                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);
								                    }

								                    lex();
								                    left = init;
								                    right = parseExpression();
								                    init = null;
								                }
								            }

								            if (typeof left === 'undefined') {
								                expect(';');
								            }
								        }

								        if (typeof left === 'undefined') {

								            if (!match(';')) {
								                test = parseExpression();
								            }
								            expect(';');

								            if (!match(')')) {
								                update = parseExpression();
								            }
								        }

								        expect(')');

								        oldInIteration = state.inIteration;
								        state.inIteration = true;

								        body = parseStatement();

								        state.inIteration = oldInIteration;

								        return (typeof left === 'undefined') ?
								                delegate.createForStatement(init, test, update, body) :
								                delegate.createForInStatement(left, right, body);
								    }

								    // 12.7 The continue statement

								    function parseContinueStatement() {
								        var label = null, key;

								        expectKeyword('continue');

								        // Optimize the most common form: 'continue;'.
								        if (source.charCodeAt(index) === 0x3B) {
								            lex();

								            if (!state.inIteration) {
								                throwError({}, Messages.IllegalContinue);
								            }

								            return delegate.createContinueStatement(null);
								        }

								        if (peekLineTerminator()) {
								            if (!state.inIteration) {
								                throwError({}, Messages.IllegalContinue);
								            }

								            return delegate.createContinueStatement(null);
								        }

								        if (lookahead.type === Token.Identifier) {
								            label = parseVariableIdentifier();

								            key = '$' + label.name;
								            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
								                throwError({}, Messages.UnknownLabel, label.name);
								            }
								        }

								        consumeSemicolon();

								        if (label === null && !state.inIteration) {
								            throwError({}, Messages.IllegalContinue);
								        }

								        return delegate.createContinueStatement(label);
								    }

								    // 12.8 The break statement

								    function parseBreakStatement() {
								        var label = null, key;

								        expectKeyword('break');

								        // Catch the very common case first: immediately a semicolon (U+003B).
								        if (source.charCodeAt(index) === 0x3B) {
								            lex();

								            if (!(state.inIteration || state.inSwitch)) {
								                throwError({}, Messages.IllegalBreak);
								            }

								            return delegate.createBreakStatement(null);
								        }

								        if (peekLineTerminator()) {
								            if (!(state.inIteration || state.inSwitch)) {
								                throwError({}, Messages.IllegalBreak);
								            }

								            return delegate.createBreakStatement(null);
								        }

								        if (lookahead.type === Token.Identifier) {
								            label = parseVariableIdentifier();

								            key = '$' + label.name;
								            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
								                throwError({}, Messages.UnknownLabel, label.name);
								            }
								        }

								        consumeSemicolon();

								        if (label === null && !(state.inIteration || state.inSwitch)) {
								            throwError({}, Messages.IllegalBreak);
								        }

								        return delegate.createBreakStatement(label);
								    }

								    // 12.9 The return statement

								    function parseReturnStatement() {
								        var argument = null;

								        expectKeyword('return');

								        if (!state.inFunctionBody) {
								            throwErrorTolerant({}, Messages.IllegalReturn);
								        }

								        // 'return' followed by a space and an identifier is very common.
								        if (source.charCodeAt(index) === 0x20) {
								            if (isIdentifierStart(source.charCodeAt(index + 1))) {
								                argument = parseExpression();
								                consumeSemicolon();
								                return delegate.createReturnStatement(argument);
								            }
								        }

								        if (peekLineTerminator()) {
								            return delegate.createReturnStatement(null);
								        }

								        if (!match(';')) {
								            if (!match('}') && lookahead.type !== Token.EOF) {
								                argument = parseExpression();
								            }
								        }

								        consumeSemicolon();

								        return delegate.createReturnStatement(argument);
								    }

								    // 12.10 The with statement

								    function parseWithStatement() {
								        var object, body;

								        if (strict) {
								            throwErrorTolerant({}, Messages.StrictModeWith);
								        }

								        expectKeyword('with');

								        expect('(');

								        object = parseExpression();

								        expect(')');

								        body = parseStatement();

								        return delegate.createWithStatement(object, body);
								    }

								    // 12.10 The swith statement

								    function parseSwitchCase() {
								        var test,
								            consequent = [],
								            statement;

								        skipComment();
								        delegate.markStart();
								        if (matchKeyword('default')) {
								            lex();
								            test = null;
								        } else {
								            expectKeyword('case');
								            test = parseExpression();
								        }
								        expect(':');

								        while (index < length) {
								            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
								                break;
								            }
								            statement = parseStatement();
								            consequent.push(statement);
								        }

								        return delegate.markEnd(delegate.createSwitchCase(test, consequent));
								    }

								    function parseSwitchStatement() {
								        var discriminant, cases, clause, oldInSwitch, defaultFound;

								        expectKeyword('switch');

								        expect('(');

								        discriminant = parseExpression();

								        expect(')');

								        expect('{');

								        cases = [];

								        if (match('}')) {
								            lex();
								            return delegate.createSwitchStatement(discriminant, cases);
								        }

								        oldInSwitch = state.inSwitch;
								        state.inSwitch = true;
								        defaultFound = false;

								        while (index < length) {
								            if (match('}')) {
								                break;
								            }
								            clause = parseSwitchCase();
								            if (clause.test === null) {
								                if (defaultFound) {
								                    throwError({}, Messages.MultipleDefaultsInSwitch);
								                }
								                defaultFound = true;
								            }
								            cases.push(clause);
								        }

								        state.inSwitch = oldInSwitch;

								        expect('}');

								        return delegate.createSwitchStatement(discriminant, cases);
								    }

								    // 12.13 The throw statement

								    function parseThrowStatement() {
								        var argument;

								        expectKeyword('throw');

								        if (peekLineTerminator()) {
								            throwError({}, Messages.NewlineAfterThrow);
								        }

								        argument = parseExpression();

								        consumeSemicolon();

								        return delegate.createThrowStatement(argument);
								    }

								    // 12.14 The try statement

								    function parseCatchClause() {
								        var param, body;

								        skipComment();
								        delegate.markStart();
								        expectKeyword('catch');

								        expect('(');
								        if (match(')')) {
								            throwUnexpected(lookahead);
								        }

								        param = parseVariableIdentifier();
								        // 12.14.1
								        if (strict && isRestrictedWord(param.name)) {
								            throwErrorTolerant({}, Messages.StrictCatchVariable);
								        }

								        expect(')');
								        body = parseBlock();
								        return delegate.markEnd(delegate.createCatchClause(param, body));
								    }

								    function parseTryStatement() {
								        var block, handlers = [], finalizer = null;

								        expectKeyword('try');

								        block = parseBlock();

								        if (matchKeyword('catch')) {
								            handlers.push(parseCatchClause());
								        }

								        if (matchKeyword('finally')) {
								            lex();
								            finalizer = parseBlock();
								        }

								        if (handlers.length === 0 && !finalizer) {
								            throwError({}, Messages.NoCatchOrFinally);
								        }

								        return delegate.createTryStatement(block, [], handlers, finalizer);
								    }

								    // 12.15 The debugger statement

								    function parseDebuggerStatement() {
								        expectKeyword('debugger');

								        consumeSemicolon();

								        return delegate.createDebuggerStatement();
								    }

								    // 12 Statements

								    function parseStatement() {
								        var type = lookahead.type,
								            expr,
								            labeledBody,
								            key;

								        if (type === Token.EOF) {
								            throwUnexpected(lookahead);
								        }

								        skipComment();
								        delegate.markStart();

								        if (type === Token.Punctuator) {
								            switch (lookahead.value) {
								            case ';':
								                return delegate.markEnd(parseEmptyStatement());
								            case '{':
								                return delegate.markEnd(parseBlock());
								            case '(':
								                return delegate.markEnd(parseExpressionStatement());
								            default:
								                break;
								            }
								        }

								        if (type === Token.Keyword) {
								            switch (lookahead.value) {
								            case 'break':
								                return delegate.markEnd(parseBreakStatement());
								            case 'continue':
								                return delegate.markEnd(parseContinueStatement());
								            case 'debugger':
								                return delegate.markEnd(parseDebuggerStatement());
								            case 'do':
								                return delegate.markEnd(parseDoWhileStatement());
								            case 'for':
								                return delegate.markEnd(parseForStatement());
								            case 'function':
								                return delegate.markEnd(parseFunctionDeclaration());
								            case 'if':
								                return delegate.markEnd(parseIfStatement());
								            case 'return':
								                return delegate.markEnd(parseReturnStatement());
								            case 'switch':
								                return delegate.markEnd(parseSwitchStatement());
								            case 'throw':
								                return delegate.markEnd(parseThrowStatement());
								            case 'try':
								                return delegate.markEnd(parseTryStatement());
								            case 'var':
								                return delegate.markEnd(parseVariableStatement());
								            case 'while':
								                return delegate.markEnd(parseWhileStatement());
								            case 'with':
								                return delegate.markEnd(parseWithStatement());
								            default:
								                break;
								            }
								        }

								        expr = parseExpression();

								        // 12.12 Labelled Statements
								        if ((expr.type === Syntax.Identifier) && match(':')) {
								            lex();

								            key = '$' + expr.name;
								            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
								                throwError({}, Messages.Redeclaration, 'Label', expr.name);
								            }

								            state.labelSet[key] = true;
								            labeledBody = parseStatement();
								            delete state.labelSet[key];
								            return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody));
								        }

								        consumeSemicolon();

								        return delegate.markEnd(delegate.createExpressionStatement(expr));
								    }

								    // 13 Function Definition

								    function parseFunctionSourceElements() {
								        var sourceElement, sourceElements = [], token, directive, firstRestricted,
								            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;

								        skipComment();
								        delegate.markStart();
								        expect('{');

								        while (index < length) {
								            if (lookahead.type !== Token.StringLiteral) {
								                break;
								            }
								            token = lookahead;

								            sourceElement = parseSourceElement();
								            sourceElements.push(sourceElement);
								            if (sourceElement.expression.type !== Syntax.Literal) {
								                // this is not directive
								                break;
								            }
								            directive = source.slice(token.range[0] + 1, token.range[1] - 1);
								            if (directive === 'use strict') {
								                strict = true;
								                if (firstRestricted) {
								                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
								                }
								            } else {
								                if (!firstRestricted && token.octal) {
								                    firstRestricted = token;
								                }
								            }
								        }

								        oldLabelSet = state.labelSet;
								        oldInIteration = state.inIteration;
								        oldInSwitch = state.inSwitch;
								        oldInFunctionBody = state.inFunctionBody;

								        state.labelSet = {};
								        state.inIteration = false;
								        state.inSwitch = false;
								        state.inFunctionBody = true;

								        while (index < length) {
								            if (match('}')) {
								                break;
								            }
								            sourceElement = parseSourceElement();
								            if (typeof sourceElement === 'undefined') {
								                break;
								            }
								            sourceElements.push(sourceElement);
								        }

								        expect('}');

								        state.labelSet = oldLabelSet;
								        state.inIteration = oldInIteration;
								        state.inSwitch = oldInSwitch;
								        state.inFunctionBody = oldInFunctionBody;

								        return delegate.markEnd(delegate.createBlockStatement(sourceElements));
								    }

								    function parseParams(firstRestricted) {
								        var param, params = [], token, stricted, paramSet, key, message;
								        expect('(');

								        if (!match(')')) {
								            paramSet = {};
								            while (index < length) {
								                token = lookahead;
								                param = parseVariableIdentifier();
								                key = '$' + token.value;
								                if (strict) {
								                    if (isRestrictedWord(token.value)) {
								                        stricted = token;
								                        message = Messages.StrictParamName;
								                    }
								                    if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
								                        stricted = token;
								                        message = Messages.StrictParamDupe;
								                    }
								                } else if (!firstRestricted) {
								                    if (isRestrictedWord(token.value)) {
								                        firstRestricted = token;
								                        message = Messages.StrictParamName;
								                    } else if (isStrictModeReservedWord(token.value)) {
								                        firstRestricted = token;
								                        message = Messages.StrictReservedWord;
								                    } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
								                        firstRestricted = token;
								                        message = Messages.StrictParamDupe;
								                    }
								                }
								                params.push(param);
								                paramSet[key] = true;
								                if (match(')')) {
								                    break;
								                }
								                expect(',');
								            }
								        }

								        expect(')');

								        return {
								            params: params,
								            stricted: stricted,
								            firstRestricted: firstRestricted,
								            message: message
								        };
								    }

								    function parseFunctionDeclaration() {
								        var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict;

								        skipComment();
								        delegate.markStart();

								        expectKeyword('function');
								        token = lookahead;
								        id = parseVariableIdentifier();
								        if (strict) {
								            if (isRestrictedWord(token.value)) {
								                throwErrorTolerant(token, Messages.StrictFunctionName);
								            }
								        } else {
								            if (isRestrictedWord(token.value)) {
								                firstRestricted = token;
								                message = Messages.StrictFunctionName;
								            } else if (isStrictModeReservedWord(token.value)) {
								                firstRestricted = token;
								                message = Messages.StrictReservedWord;
								            }
								        }

								        tmp = parseParams(firstRestricted);
								        params = tmp.params;
								        stricted = tmp.stricted;
								        firstRestricted = tmp.firstRestricted;
								        if (tmp.message) {
								            message = tmp.message;
								        }

								        previousStrict = strict;
								        body = parseFunctionSourceElements();
								        if (strict && firstRestricted) {
								            throwError(firstRestricted, message);
								        }
								        if (strict && stricted) {
								            throwErrorTolerant(stricted, message);
								        }
								        strict = previousStrict;

								        return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body));
								    }

								    function parseFunctionExpression() {
								        var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict;

								        delegate.markStart();
								        expectKeyword('function');

								        if (!match('(')) {
								            token = lookahead;
								            id = parseVariableIdentifier();
								            if (strict) {
								                if (isRestrictedWord(token.value)) {
								                    throwErrorTolerant(token, Messages.StrictFunctionName);
								                }
								            } else {
								                if (isRestrictedWord(token.value)) {
								                    firstRestricted = token;
								                    message = Messages.StrictFunctionName;
								                } else if (isStrictModeReservedWord(token.value)) {
								                    firstRestricted = token;
								                    message = Messages.StrictReservedWord;
								                }
								            }
								        }

								        tmp = parseParams(firstRestricted);
								        params = tmp.params;
								        stricted = tmp.stricted;
								        firstRestricted = tmp.firstRestricted;
								        if (tmp.message) {
								            message = tmp.message;
								        }

								        previousStrict = strict;
								        body = parseFunctionSourceElements();
								        if (strict && firstRestricted) {
								            throwError(firstRestricted, message);
								        }
								        if (strict && stricted) {
								            throwErrorTolerant(stricted, message);
								        }
								        strict = previousStrict;

								        return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body));
								    }

								    // 14 Program

								    function parseSourceElement() {
								        if (lookahead.type === Token.Keyword) {
								            switch (lookahead.value) {
								            case 'const':
								            case 'let':
								                return parseConstLetDeclaration(lookahead.value);
								            case 'function':
								                return parseFunctionDeclaration();
								            default:
								                return parseStatement();
								            }
								        }

								        if (lookahead.type !== Token.EOF) {
								            return parseStatement();
								        }
								    }

								    function parseSourceElements() {
								        var sourceElement, sourceElements = [], token, directive, firstRestricted;

								        while (index < length) {
								            token = lookahead;
								            if (token.type !== Token.StringLiteral) {
								                break;
								            }

								            sourceElement = parseSourceElement();
								            sourceElements.push(sourceElement);
								            if (sourceElement.expression.type !== Syntax.Literal) {
								                // this is not directive
								                break;
								            }
								            directive = source.slice(token.range[0] + 1, token.range[1] - 1);
								            if (directive === 'use strict') {
								                strict = true;
								                if (firstRestricted) {
								                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
								                }
								            } else {
								                if (!firstRestricted && token.octal) {
								                    firstRestricted = token;
								                }
								            }
								        }

								        while (index < length) {
								            sourceElement = parseSourceElement();
								            if (typeof sourceElement === 'undefined') {
								                break;
								            }
								            sourceElements.push(sourceElement);
								        }
								        return sourceElements;
								    }

								    function parseProgram() {
								        var body;

								        skipComment();
								        delegate.markStart();
								        strict = false;
								        peek();
								        body = parseSourceElements();
								        return delegate.markEnd(delegate.createProgram(body));
								    }

								    function attachComments() {
								        var i, attacher, comment, leading, trailing;

								        for (i = 0; i < extra.pendingComments.length; ++i) {
								            attacher = extra.pendingComments[i];
								            comment = attacher.comment;
								            leading = attacher.leading;
								            if (leading) {
								                if (typeof leading.leadingComments === 'undefined') {
								                    leading.leadingComments = [];
								                }
								                leading.leadingComments.push(attacher.comment);
								            }
								            trailing = attacher.trailing;
								            if (trailing) {
								                if (typeof trailing.trailingComments === 'undefined') {
								                    trailing.trailingComments = [];
								                }
								                trailing.trailingComments.push(attacher.comment);
								            }
								        }
								        extra.pendingComments = [];
								    }

								    function filterTokenLocation() {
								        var i, entry, token, tokens = [];

								        for (i = 0; i < extra.tokens.length; ++i) {
								            entry = extra.tokens[i];
								            token = {
								                type: entry.type,
								                value: entry.value
								            };
								            if (extra.range) {
								                token.range = entry.range;
								            }
								            if (extra.loc) {
								                token.loc = entry.loc;
								            }
								            tokens.push(token);
								        }

								        extra.tokens = tokens;
								    }

								    function LocationMarker() {
								        this.marker = [index, lineNumber, index - lineStart, 0, 0, 0];
								    }

								    LocationMarker.prototype = {
								        constructor: LocationMarker,

								        end: function () {
								            this.marker[3] = index;
								            this.marker[4] = lineNumber;
								            this.marker[5] = index - lineStart;
								        },

								        apply: function (node) {
								            if (extra.range) {
								                node.range = [this.marker[0], this.marker[3]];
								            }
								            if (extra.loc) {
								                node.loc = {
								                    start: {
								                        line: this.marker[1],
								                        column: this.marker[2]
								                    },
								                    end: {
								                        line: this.marker[4],
								                        column: this.marker[5]
								                    }
								                };
								                node = delegate.postProcess(node);
								            }
								            if (extra.attachComment) {
								                delegate.processComment(node);
								            }
								        }
								    };

								    function createLocationMarker() {
								        if (!extra.loc && !extra.range) {
								            return null;
								        }

								        skipComment();

								        return new LocationMarker();
								    }

								    function tokenize(code, options) {
								        var toString,
								            token,
								            tokens;

								        toString = String;
								        if (typeof code !== 'string' && !(code instanceof String)) {
								            code = toString(code);
								        }

								        delegate = SyntaxTreeDelegate;
								        source = code;
								        index = 0;
								        lineNumber = (source.length > 0) ? 1 : 0;
								        lineStart = 0;
								        length = source.length;
								        lookahead = null;
								        state = {
								            allowIn: true,
								            labelSet: {},
								            inFunctionBody: false,
								            inIteration: false,
								            inSwitch: false,
								            lastCommentStart: -1
								        };

								        extra = {};

								        // Options matching.
								        options = options || {};

								        // Of course we collect tokens here.
								        options.tokens = true;
								        extra.tokens = [];
								        extra.tokenize = true;
								        // The following two fields are necessary to compute the Regex tokens.
								        extra.openParenToken = -1;
								        extra.openCurlyToken = -1;

								        extra.range = (typeof options.range === 'boolean') && options.range;
								        extra.loc = (typeof options.loc === 'boolean') && options.loc;

								        if (typeof options.comment === 'boolean' && options.comment) {
								            extra.comments = [];
								        }
								        if (typeof options.tolerant === 'boolean' && options.tolerant) {
								            extra.errors = [];
								        }

								        if (length > 0) {
								            if (typeof source[0] === 'undefined') {
								                // Try first to convert to a string. This is good as fast path
								                // for old IE which understands string indexing for string
								                // literals only and not for string object.
								                if (code instanceof String) {
								                    source = code.valueOf();
								                }
								            }
								        }

								        try {
								            peek();
								            if (lookahead.type === Token.EOF) {
								                return extra.tokens;
								            }

								            token = lex();
								            while (lookahead.type !== Token.EOF) {
								                try {
								                    token = lex();
								                } catch (lexError) {
								                    token = lookahead;
								                    if (extra.errors) {
								                        extra.errors.push(lexError);
								                        // We have to break on the first error
								                        // to avoid infinite loops.
								                        break;
								                    } else {
								                        throw lexError;
								                    }
								                }
								            }

								            filterTokenLocation();
								            tokens = extra.tokens;
								            if (typeof extra.comments !== 'undefined') {
								                tokens.comments = extra.comments;
								            }
								            if (typeof extra.errors !== 'undefined') {
								                tokens.errors = extra.errors;
								            }
								        } catch (e) {
								            throw e;
								        } finally {
								            extra = {};
								        }
								        return tokens;
								    }

								    function parse(code, options) {
								        var program, toString;

								        toString = String;
								        if (typeof code !== 'string' && !(code instanceof String)) {
								            code = toString(code);
								        }

								        delegate = SyntaxTreeDelegate;
								        source = code;
								        index = 0;
								        lineNumber = (source.length > 0) ? 1 : 0;
								        lineStart = 0;
								        length = source.length;
								        lookahead = null;
								        state = {
								            allowIn: true,
								            labelSet: {},
								            inFunctionBody: false,
								            inIteration: false,
								            inSwitch: false,
								            lastCommentStart: -1,
								            markerStack: []
								        };

								        extra = {};
								        if (typeof options !== 'undefined') {
								            extra.range = (typeof options.range === 'boolean') && options.range;
								            extra.loc = (typeof options.loc === 'boolean') && options.loc;
								            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

								            if (extra.loc && options.source !== null && options.source !== undefined) {
								                extra.source = toString(options.source);
								            }

								            if (typeof options.tokens === 'boolean' && options.tokens) {
								                extra.tokens = [];
								            }
								            if (typeof options.comment === 'boolean' && options.comment) {
								                extra.comments = [];
								            }
								            if (typeof options.tolerant === 'boolean' && options.tolerant) {
								                extra.errors = [];
								            }
								            if (extra.attachComment) {
								                extra.range = true;
								                extra.pendingComments = [];
								                extra.comments = [];
								            }
								        }

								        if (length > 0) {
								            if (typeof source[0] === 'undefined') {
								                // Try first to convert to a string. This is good as fast path
								                // for old IE which understands string indexing for string
								                // literals only and not for string object.
								                if (code instanceof String) {
								                    source = code.valueOf();
								                }
								            }
								        }

								        try {
								            program = parseProgram();
								            if (typeof extra.comments !== 'undefined') {
								                program.comments = extra.comments;
								            }
								            if (typeof extra.tokens !== 'undefined') {
								                filterTokenLocation();
								                program.tokens = extra.tokens;
								            }
								            if (typeof extra.errors !== 'undefined') {
								                program.errors = extra.errors;
								            }
								            if (extra.attachComment) {
								                attachComments();
								            }
								        } catch (e) {
								            throw e;
								        } finally {
								            extra = {};
								        }

								        return program;
								    }

								    // Sync with *.json manifests.
								    exports.version = '1.1.0-dev';

								    exports.tokenize = tokenize;

								    exports.parse = parse;

								    // Deep copy.
								    exports.Syntax = (function () {
								        var name, types = {};

								        if (typeof Object.create === 'function') {
								            types = Object.create(null);
								        }

								        for (name in Syntax) {
								            if (Syntax.hasOwnProperty(name)) {
								                types[name] = Syntax[name];
								            }
								        }

								        if (typeof Object.freeze === 'function') {
								            Object.freeze(types);
								        }

								        return types;
								    }());

								}));
								/* vim: set sw=4 ts=4 et tw=80 : */
							},
							"lambda.js": function (exports, module, require) {
								var LambdaParser = require("../parser/lambda_parser.js");

								/* =====================================================================
								 *  Lambda Basic definitions: 
								 * 
								 *  The set of lambda expressions, Λ, can be defined inductively:
								 * 
								 *  - If x is a variable, then x ∈ Λ
								 *  - If x is a variable and M ∈ Λ, then (λx.M) ∈ Λ
								 *  - If M, N ∈ Λ, then (M N) ∈ Λ
								 * ===================================================================== 
								*/

								function Variable (varname) {
									this.varname = varname;
								};


								function Abstraction (x, M) {
									this.x = x;
									this.M = M;
								};

								function Application (M, N) {
									this.M = M;
									this.N = N;
								};

								/*
								 * To String:
								 */

								Variable.prototype.toString = function (lambda) {
									return this.varname.toString ();	
								};

								Application.prototype.toString = function (lambda) {
									lambda = lambda || "λ";
									return "(" + this.M.toString (lambda) + " " + this.N.toString (lambda) + ")";
								};

								Abstraction.prototype.toString = function (lambda) {
									lambda = lambda || "λ";
									return  "(" + lambda + this.x.toString(lambda) + "." + this.M.toString (lambda) + ")";
								};

								/* =====================================================================
								 *  Clone,
								 *   Make a deep copy of the lambda-calculus terms. 
								 * ===================================================================== */

								Variable.prototype.clone = function () {
								  return new Variable (this.varname);
								};

								Abstraction.prototype.clone = function () {
								  return new Abstraction (this.x.clone (), this.M.clone ());
								};

								Application.prototype.clone = function () {
								  return new Application (this.M.clone (), this.N.clone());
								};

								/*
								 * Variables.
								 */
								Variable.prototype.variables = function (vars) {
									vars = vars || {bound: {}, free: {}};

									if (!vars.bound[this.varname]) {
										vars.free[this.varname] = true;
									}
									
									return vars;
								};

								Abstraction.prototype.variables = function (vars) {
									vars = vars || {bound: {}, free: {}};
									
									vars.bound[this.x.varname] = (vars.bound[this.x.varname] || 0)+1;
										
									this.M.variables (vars);

									vars.bound[this.x.varname]--;
									
									return vars;
								};

								Application.prototype.variables = function (vars) {
									vars = vars || {bound: {}, free: {}};

									this.M.variables (vars);
									this.N.variables (vars);

									return vars;
								};



								/* 
								 * Alpha Conversion
								 *
								 * Alpha-conversion, sometimes known as alpha-renaming, allows bound variable names to be changed.
								 * For example, alpha-conversion of λx.x might yield λy.y.
								 * Terms that differ only by alpha-conversion are called α-equivalent.
								 * Frequently in uses of lambda calculus, α-equivalent terms are considered to be equivalent.
								 * 
								 * The precise rules for alpha-conversion are not completely trivial.
								 * First, when alpha-converting an abstraction, the only variable occurrences that are renamed are those that are bound
								 * to the same abstraction. For example, an alpha-conversion of λx.λx.x could result in λy.λx.x,
								 * but it could not result in λy.λx.y. The latter has a different meaning from the original.
								 * Second, alpha-conversion is not possible if it would result in a variable getting captured by a different abstraction.
								 * For example, if we replace x with y in λx.λy.x, we get λy.λy.y, which is not at all the same.
								 * 
								*/
								/*
								Application.prototype.alphaConversion = function (varname, new_varname, bound) {

								  this.M.alphaConversion (varname, new_varname, bound);
								  this.N.alphaConversion (varname, new_varname, bound);
								  
								  return this;
								};

								Abstraction.prototype.alphaConversion = function (varname, new_varname, bound) {
									
									if (bound && this.x.varname === varname) {
										return this;
									}
									
									if (this.x.varname === new_varname && (varname in this.variables().free) ) {
										var vars = this.variables();
										var i=1;
										var rename = this.x.varname + i;
										
										while (rename in vars.bound || rename in vars.free ) {
											i++;
											rename = this.x.varname + i;
										}
										 
										this.alphaConversion (this.x.varname, rename);
									}
									
									if (this.x.varname === varname) {
										this.x.alphaConversion (varname, new_varname);
										this.M.alphaConversion (varname, new_varname, true);
									}
									else {
										this.M.alphaConversion (varname, new_varname, bound);		
									}

									return this;
								};

								Variable.prototype.alphaConversion = function (varname, new_varname) {
									if (this.varname === varname) {
										this.varname = new_varname; 
									}
									
									return this;
								};
								*/

								Application.prototype.alphaConversion = function (varname, new_varname) {
									var vars = this.variables();

									if (vars.free[new_varname]) {
										var name = new_varname;
										for (var i=0; vars.free[name]; i++) {
											name = name + "_" + i;
										}
										return this.alphaConversion (varname, name);
									}

									this.M.alphaConversion (varname, new_varname);
									this.N.alphaConversion (varname, new_varname);
								  
									return this;
								};

								Abstraction.prototype.alphaConversion = function (varname, new_varname) {
										
									var vars = this.variables();
									var vn = varname || this.x.varname;

									if (vars.free[new_varname]) {
										var name = new_varname;
										for (var i=0; vars.free[name]; i++) {
											name = name + "_" + i;
										}
										// return this.alphaConversion (varname, name);
										new_varname = name;
									}
									
									if (!varname) {
										this.x.alphaConversion (this.x.varname, new_varname);
										this.M.alphaConversion (vn, new_varname);
										return this;
									}

									
									if (vars.free[varname]) {
										var name = this.x.varname;
										for (var i=0; vars.free[name] || name === new_varname; i++) {
											name = name + "_" + i;
										}
										
										if (name !== this.x.varname) {
											this.M.alphaConversion (this.x.varname, name);
											this.x.alphaConversion (varname, name);
										}
										
										this.M.alphaConversion (varname, new_varname);		
									}
									
									return this;
								};

								Variable.prototype.alphaConversion = function (varname, new_varname) {
									if (this.varname === varname) {
										this.varname = new_varname; 
									}
									
									return this;
								};

								// Beta Reduction
								/*
								 * "The pure untyped lambda calculus does not satisfy the strong normalization property, 
								 *   and not even the weak normalization property"
								 */

								Application.prototype.apply = function (varname, value, free) {
								  free = free || value.variables().free;

								  this.M = this.M.apply(varname, value, free);
								  this.N = this.N.apply(varname, value, free);
								  return this;
								}

								Abstraction.prototype.apply = function (varname, value, free) {
								  free = free || value.variables().free;

								  if (this.x.varname.indexOf(free) !== -1) {
									 this.rename(free);
								  }

								  if (varname !== this.x.varname) {
									this.M = this.M.apply(varname, value)
								  }

								  return this;
								}

								Variable.prototype.apply = function (varname, value, free) {
								  if (this.varname === varname) {
									  return value.clone ();
								  }

								  return this;
								} 
								 
								Application.prototype.betaReduction = function () {
									if (this.M instanceof Abstraction) {
									  // Before Apply make sure there is no capture of free variables.
									  var vars = this.N.variables (); 
									  
									  
									  for (var v in vars.free) {
										console.log("Alpha Conversion =>\n\n" + this.M);
										console.log(this.M.x + " => " + v);
										 this.M.alphaConversion (this.M.x.varname, v);
									  }
									  
									  return this.M.M.apply (this.M.x.varname, this.N); // .betaReduction (); 
									}
									
									var M = this.M;
									this.M = this.M.betaReduction ();
									if (M != this.M) {return this.betaReduction ();}
									  
								  	this.N = this.N.betaReduction ();
									
									return this;
								}

								Abstraction.prototype.betaReduction = function () {
								  this.M = this.M.betaReduction ();
								  
								  return this;
								}

								Variable.prototype.betaReduction = function () {
								  return this;
								};

								/*
								 * Normal order
								 *  - The leftmost, outermost redex is always reduced first. 
								 *    That is, whenever possible the arguments are substituted 
								 *    into the body of an abstraction before the arguments are reduced.
								 */
								Application.prototype.betaNormalOrderReduction = function () {
									/*if (this.M instanceof Lambda.Abstraction) {
									  // Before Apply make sure there is no capture of free variables.
									  var vars = this.N.variables (); 
									  
									  var r = this.M.x.varname;
									  
									  for (var v in vars.free) {
										 this.M.alphaConversion (r, v);
										 r = v;
									  }
									  
									  this.M.alphaConversion (r,this.M.x.varname);
									  
									  return this.M.M.apply (this.M.x.varname, this.N);
									}*/
									if (this.M instanceof Abstraction) {
										return this.M.M.apply(this.M.x.varname, this.N);
									}

									var M = this.M;
									this.M = this.M.betaNormalOrderReduction ();
									if (M != this.M) {return this.betaNormalOrderReduction ();}
									  
								  	this.N = this.N.betaNormalOrderReduction ();
									
									return this;
								}

								Abstraction.prototype.betaNormalOrderReduction = function () {
								  this.M = this.M.betaNormalOrderReduction ();
								  
								  return this;
								}

								Variable.prototype.betaNormalOrderReduction = function () {
								  return this;
								};


									
								// TODO: for now dont use notes.
								function parse (code) {
									var l = LambdaParser.parse(code);
									  
									function mkLambda (l) {
										switch (l.type) {
											case "application": return new Application (mkLambda(l.M), mkLambda(l.N));
											case "abstraction": return new Abstraction (mkLambda(l.x), mkLambda(l.M));
											case "variable": return new Variable (l.varname);
										}
									}
								  
									return mkLambda(l);
								};


								 /*
								  * Lambda STD Lib
								  */
								 
								/*
								 * TODO: rewrite this with polimorphism
								 */ 
								function bind (name, definition, lambda, do_parse) {
									if (do_parse) {
										definition = parse ("{"+ name +"}" + definition);
									}
									return new Application (
										new Abstraction (
											new Variable (name , name),
											lambda
										),
										// Lambda.parse ("{"+ name +"}" + definition)
										definition
									);
								}

								Variable.prototype.bind = function (name, definition, parse) {
									return bind (name, definition, this, parse);
								};

								Abstraction.prototype.bind = function (name, definition, parse) {
									return bind (name, definition, this, parse);

								};

								Application.prototype.bind = function (name, definition, parse) {
									return bind (name, definition, this, parse);
								};


								function std_lib (lambda) {
										
									return lambda
										.bind ("===", "$m.$n.&& (<= m n) (<= n m)",true)
										.bind ("<=", "$m.$n.isZero (- m n)",true)
										.bind ("-", "$m.$n. (n pred) m",true)
										.bind ("+", "$m.$n.n succ m",true)
										.bind ("*", "$m.$n.$f.m (n f)",true)
										.bind ("pred", "$n.$f.$x. n ($g.$h. h (g f)) ($u.x) ($u.u)",true)
										.bind ("isZero", "$n.n ($x.false) true",true)
										.bind ("||", "$p.$q.nand (! p) (! q)",true)
										.bind ("&&", "$p.$q.! (nand p q)",true)
										.bind ("!", "$p.nand p p",true)
										.bind ("nand", "$p.$q.p q false false true",true)
										.bind ("true", "$x.$y.x",true)
										.bind ("false", "$x.$y.y",true)
										.bind ("fixpoint", "$f.($x.f (x x)) ($x.f (x x))",true)
									;

								};

								function std_rename (lambda) {
									return lambda
											.alphaConversion ("===", "EQ")
											.alphaConversion ("<=", "LEQ") 
											.alphaConversion ("-", "SUB")
											.alphaConversion ("+", "ADD")
											.alphaConversion ("*", "MUL")
											.alphaConversion ("pred", "PRED")
											.alphaConversion ("isZero", "ISZERO")
											.alphaConversion ("||", "OR")
											.alphaConversion ("&&", "AND")
											.alphaConversion ("!", "NOT")
											.alphaConversion ("nand", "NAND")
											.alphaConversion ("true", "TRUE")
											.alphaConversion ("false", "FALSE")
											.alphaConversion ("fixpoint", "FIXPOINT")
									;
								};


								/*
								 * 
								 * TO JSON
								 */
								 
								Application.prototype.toJSON = function () {
									return {type: "application", M: this.M.toJSON(), N: this.N.toJSON};
								};

								Abstraction.prototype.toJSON = function () {
									return {type: "asbtraction", x: this.x.toJSON(), M: this.M.toJSON()};	
								};

								Variable.prototype.toJSON = function () {
									return {type: "variable", varname: this.varname};
								};



								// Export functions:
								module.exports = {
									Variable: Variable,
									Abstraction: Abstraction,
									Application: Variable,
									parse: parse,
									bind: bind,
									std_lib: std_lib,
									std_rename: std_rename
								};

							}
						},
						"parser": {
							"lambda_parser.js": function (exports, module, require) {
								module.exports = (function() {
								  /*
								   * Generated by PEG.js 0.8.0.
								   *
								   * http://pegjs.majda.cz/
								   */

								  function peg$subclass(child, parent) {
								    function ctor() { this.constructor = child; }
								    ctor.prototype = parent.prototype;
								    child.prototype = new ctor();
								  }

								  function SyntaxError(message, expected, found, offset, line, column) {
								    this.message  = message;
								    this.expected = expected;
								    this.found    = found;
								    this.offset   = offset;
								    this.line     = line;
								    this.column   = column;

								    this.name     = "SyntaxError";
								  }

								  peg$subclass(SyntaxError, Error);

								  function parse(input) {
								    var options = arguments.length > 1 ? arguments[1] : {},

								        peg$FAILED = {},

								        peg$startRuleFunctions = { start: peg$parsestart },
								        peg$startRuleFunction  = peg$parsestart,

								        peg$c0 = peg$FAILED,
								        peg$c1 = [],
								        peg$c2 = "(",
								        peg$c3 = { type: "literal", value: "(", description: "\"(\"" },
								        peg$c4 = ")",
								        peg$c5 = { type: "literal", value: ")", description: "\")\"" },
								        peg$c6 = function(lambda) {return lambda;},
								        peg$c7 = function(l) {return l;},
								        peg$c8 = function(app) {
								           var result = app[0];
								           for (var i=1; i< app.length; i++) {
								             result = {
								               type: "application",
								               M: result,
								               N: app[i]
								             };
								           }
								          
								           return result;
								         },
								        peg$c9 = null,
								        peg$c10 = /^[^()${} \t\n.]/,
								        peg$c11 = { type: "class", value: "[^()${} \\t\\n.]", description: "[^()${} \\t\\n.]" },
								        peg$c12 = function(note, id) {
								            return {
								               type: "variable",
								               varname: id.join(""),
								               note: note
								            }; 
								          },
								        peg$c13 = "$",
								        peg$c14 = { type: "literal", value: "$", description: "\"$\"" },
								        peg$c15 = ".",
								        peg$c16 = { type: "literal", value: ".", description: "\".\"" },
								        peg$c17 = function(note, param, body) {
								            return {
								              type: "abstraction",
								              x: param,
								              M: body,
								              note: note
								            }
								          },
								        peg$c18 = "{",
								        peg$c19 = { type: "literal", value: "{", description: "\"{\"" },
								        peg$c20 = /^[^}]/,
								        peg$c21 = { type: "class", value: "[^}]", description: "[^}]" },
								        peg$c22 = "}",
								        peg$c23 = { type: "literal", value: "}", description: "\"}\"" },
								        peg$c24 = function(note) {return note.join("");},
								        peg$c25 = /^[ \t\n]/,
								        peg$c26 = { type: "class", value: "[ \\t\\n]", description: "[ \\t\\n]" },

								        peg$currPos          = 0,
								        peg$reportedPos      = 0,
								        peg$cachedPos        = 0,
								        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
								        peg$maxFailPos       = 0,
								        peg$maxFailExpected  = [],
								        peg$silentFails      = 0,

								        peg$result;

								    if ("startRule" in options) {
								      if (!(options.startRule in peg$startRuleFunctions)) {
								        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
								      }

								      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
								    }

								    function text() {
								      return input.substring(peg$reportedPos, peg$currPos);
								    }

								    function offset() {
								      return peg$reportedPos;
								    }

								    function line() {
								      return peg$computePosDetails(peg$reportedPos).line;
								    }

								    function column() {
								      return peg$computePosDetails(peg$reportedPos).column;
								    }

								    function expected(description) {
								      throw peg$buildException(
								        null,
								        [{ type: "other", description: description }],
								        peg$reportedPos
								      );
								    }

								    function error(message) {
								      throw peg$buildException(message, null, peg$reportedPos);
								    }

								    function peg$computePosDetails(pos) {
								      function advance(details, startPos, endPos) {
								        var p, ch;

								        for (p = startPos; p < endPos; p++) {
								          ch = input.charAt(p);
								          if (ch === "\n") {
								            if (!details.seenCR) { details.line++; }
								            details.column = 1;
								            details.seenCR = false;
								          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
								            details.line++;
								            details.column = 1;
								            details.seenCR = true;
								          } else {
								            details.column++;
								            details.seenCR = false;
								          }
								        }
								      }

								      if (peg$cachedPos !== pos) {
								        if (peg$cachedPos > pos) {
								          peg$cachedPos = 0;
								          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
								        }
								        advance(peg$cachedPosDetails, peg$cachedPos, pos);
								        peg$cachedPos = pos;
								      }

								      return peg$cachedPosDetails;
								    }

								    function peg$fail(expected) {
								      if (peg$currPos < peg$maxFailPos) { return; }

								      if (peg$currPos > peg$maxFailPos) {
								        peg$maxFailPos = peg$currPos;
								        peg$maxFailExpected = [];
								      }

								      peg$maxFailExpected.push(expected);
								    }

								    function peg$buildException(message, expected, pos) {
								      function cleanupExpected(expected) {
								        var i = 1;

								        expected.sort(function(a, b) {
								          if (a.description < b.description) {
								            return -1;
								          } else if (a.description > b.description) {
								            return 1;
								          } else {
								            return 0;
								          }
								        });

								        while (i < expected.length) {
								          if (expected[i - 1] === expected[i]) {
								            expected.splice(i, 1);
								          } else {
								            i++;
								          }
								        }
								      }

								      function buildMessage(expected, found) {
								        function stringEscape(s) {
								          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

								          return s
								            .replace(/\\/g,   '\\\\')
								            .replace(/"/g,    '\\"')
								            .replace(/\x08/g, '\\b')
								            .replace(/\t/g,   '\\t')
								            .replace(/\n/g,   '\\n')
								            .replace(/\f/g,   '\\f')
								            .replace(/\r/g,   '\\r')
								            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
								            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
								            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
								            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
								        }

								        var expectedDescs = new Array(expected.length),
								            expectedDesc, foundDesc, i;

								        for (i = 0; i < expected.length; i++) {
								          expectedDescs[i] = expected[i].description;
								        }

								        expectedDesc = expected.length > 1
								          ? expectedDescs.slice(0, -1).join(", ")
								              + " or "
								              + expectedDescs[expected.length - 1]
								          : expectedDescs[0];

								        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

								        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
								      }

								      var posDetails = peg$computePosDetails(pos),
								          found      = pos < input.length ? input.charAt(pos) : null;

								      if (expected !== null) {
								        cleanupExpected(expected);
								      }

								      return new SyntaxError(
								        message !== null ? message : buildMessage(expected, found),
								        expected,
								        found,
								        pos,
								        posDetails.line,
								        posDetails.column
								      );
								    }

								    function peg$parsestart() {
								      var s0;

								      s0 = peg$parselambda();

								      return s0;
								    }

								    function peg$parselambda() {
								      var s0, s1, s2, s3, s4, s5, s6, s7;

								      s0 = peg$currPos;
								      s1 = [];
								      s2 = peg$currPos;
								      s3 = [];
								      s4 = peg$parsespace();
								      while (s4 !== peg$FAILED) {
								        s3.push(s4);
								        s4 = peg$parsespace();
								      }
								      if (s3 !== peg$FAILED) {
								        s4 = peg$parseabstraction();
								        if (s4 === peg$FAILED) {
								          s4 = peg$parsevariable();
								          if (s4 === peg$FAILED) {
								            s4 = peg$currPos;
								            if (input.charCodeAt(peg$currPos) === 40) {
								              s5 = peg$c2;
								              peg$currPos++;
								            } else {
								              s5 = peg$FAILED;
								              if (peg$silentFails === 0) { peg$fail(peg$c3); }
								            }
								            if (s5 !== peg$FAILED) {
								              s6 = peg$parselambda();
								              if (s6 !== peg$FAILED) {
								                if (input.charCodeAt(peg$currPos) === 41) {
								                  s7 = peg$c4;
								                  peg$currPos++;
								                } else {
								                  s7 = peg$FAILED;
								                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
								                }
								                if (s7 !== peg$FAILED) {
								                  peg$reportedPos = s4;
								                  s5 = peg$c6(s6);
								                  s4 = s5;
								                } else {
								                  peg$currPos = s4;
								                  s4 = peg$c0;
								                }
								              } else {
								                peg$currPos = s4;
								                s4 = peg$c0;
								              }
								            } else {
								              peg$currPos = s4;
								              s4 = peg$c0;
								            }
								          }
								        }
								        if (s4 !== peg$FAILED) {
								          peg$reportedPos = s2;
								          s3 = peg$c7(s4);
								          s2 = s3;
								        } else {
								          peg$currPos = s2;
								          s2 = peg$c0;
								        }
								      } else {
								        peg$currPos = s2;
								        s2 = peg$c0;
								      }
								      if (s2 !== peg$FAILED) {
								        while (s2 !== peg$FAILED) {
								          s1.push(s2);
								          s2 = peg$currPos;
								          s3 = [];
								          s4 = peg$parsespace();
								          while (s4 !== peg$FAILED) {
								            s3.push(s4);
								            s4 = peg$parsespace();
								          }
								          if (s3 !== peg$FAILED) {
								            s4 = peg$parseabstraction();
								            if (s4 === peg$FAILED) {
								              s4 = peg$parsevariable();
								              if (s4 === peg$FAILED) {
								                s4 = peg$currPos;
								                if (input.charCodeAt(peg$currPos) === 40) {
								                  s5 = peg$c2;
								                  peg$currPos++;
								                } else {
								                  s5 = peg$FAILED;
								                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
								                }
								                if (s5 !== peg$FAILED) {
								                  s6 = peg$parselambda();
								                  if (s6 !== peg$FAILED) {
								                    if (input.charCodeAt(peg$currPos) === 41) {
								                      s7 = peg$c4;
								                      peg$currPos++;
								                    } else {
								                      s7 = peg$FAILED;
								                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
								                    }
								                    if (s7 !== peg$FAILED) {
								                      peg$reportedPos = s4;
								                      s5 = peg$c6(s6);
								                      s4 = s5;
								                    } else {
								                      peg$currPos = s4;
								                      s4 = peg$c0;
								                    }
								                  } else {
								                    peg$currPos = s4;
								                    s4 = peg$c0;
								                  }
								                } else {
								                  peg$currPos = s4;
								                  s4 = peg$c0;
								                }
								              }
								            }
								            if (s4 !== peg$FAILED) {
								              peg$reportedPos = s2;
								              s3 = peg$c7(s4);
								              s2 = s3;
								            } else {
								              peg$currPos = s2;
								              s2 = peg$c0;
								            }
								          } else {
								            peg$currPos = s2;
								            s2 = peg$c0;
								          }
								        }
								      } else {
								        s1 = peg$c0;
								      }
								      if (s1 !== peg$FAILED) {
								        s2 = [];
								        s3 = peg$parsespace();
								        while (s3 !== peg$FAILED) {
								          s2.push(s3);
								          s3 = peg$parsespace();
								        }
								        if (s2 !== peg$FAILED) {
								          peg$reportedPos = s0;
								          s1 = peg$c8(s1);
								          s0 = s1;
								        } else {
								          peg$currPos = s0;
								          s0 = peg$c0;
								        }
								      } else {
								        peg$currPos = s0;
								        s0 = peg$c0;
								      }

								      return s0;
								    }

								    function peg$parsevariable() {
								      var s0, s1, s2, s3;

								      s0 = peg$currPos;
								      s1 = peg$parsenote();
								      if (s1 === peg$FAILED) {
								        s1 = peg$c9;
								      }
								      if (s1 !== peg$FAILED) {
								        s2 = [];
								        if (peg$c10.test(input.charAt(peg$currPos))) {
								          s3 = input.charAt(peg$currPos);
								          peg$currPos++;
								        } else {
								          s3 = peg$FAILED;
								          if (peg$silentFails === 0) { peg$fail(peg$c11); }
								        }
								        if (s3 !== peg$FAILED) {
								          while (s3 !== peg$FAILED) {
								            s2.push(s3);
								            if (peg$c10.test(input.charAt(peg$currPos))) {
								              s3 = input.charAt(peg$currPos);
								              peg$currPos++;
								            } else {
								              s3 = peg$FAILED;
								              if (peg$silentFails === 0) { peg$fail(peg$c11); }
								            }
								          }
								        } else {
								          s2 = peg$c0;
								        }
								        if (s2 !== peg$FAILED) {
								          peg$reportedPos = s0;
								          s1 = peg$c12(s1, s2);
								          s0 = s1;
								        } else {
								          peg$currPos = s0;
								          s0 = peg$c0;
								        }
								      } else {
								        peg$currPos = s0;
								        s0 = peg$c0;
								      }

								      return s0;
								    }

								    function peg$parseabstraction() {
								      var s0, s1, s2, s3, s4, s5;

								      s0 = peg$currPos;
								      s1 = peg$parsenote();
								      if (s1 === peg$FAILED) {
								        s1 = peg$c9;
								      }
								      if (s1 !== peg$FAILED) {
								        if (input.charCodeAt(peg$currPos) === 36) {
								          s2 = peg$c13;
								          peg$currPos++;
								        } else {
								          s2 = peg$FAILED;
								          if (peg$silentFails === 0) { peg$fail(peg$c14); }
								        }
								        if (s2 !== peg$FAILED) {
								          s3 = peg$parsevariable();
								          if (s3 !== peg$FAILED) {
								            if (input.charCodeAt(peg$currPos) === 46) {
								              s4 = peg$c15;
								              peg$currPos++;
								            } else {
								              s4 = peg$FAILED;
								              if (peg$silentFails === 0) { peg$fail(peg$c16); }
								            }
								            if (s4 !== peg$FAILED) {
								              s5 = peg$parselambda();
								              if (s5 !== peg$FAILED) {
								                peg$reportedPos = s0;
								                s1 = peg$c17(s1, s3, s5);
								                s0 = s1;
								              } else {
								                peg$currPos = s0;
								                s0 = peg$c0;
								              }
								            } else {
								              peg$currPos = s0;
								              s0 = peg$c0;
								            }
								          } else {
								            peg$currPos = s0;
								            s0 = peg$c0;
								          }
								        } else {
								          peg$currPos = s0;
								          s0 = peg$c0;
								        }
								      } else {
								        peg$currPos = s0;
								        s0 = peg$c0;
								      }

								      return s0;
								    }

								    function peg$parsenote() {
								      var s0, s1, s2, s3, s4, s5, s6;

								      s0 = peg$currPos;
								      s1 = [];
								      s2 = peg$parsespace();
								      while (s2 !== peg$FAILED) {
								        s1.push(s2);
								        s2 = peg$parsespace();
								      }
								      if (s1 !== peg$FAILED) {
								        if (input.charCodeAt(peg$currPos) === 123) {
								          s2 = peg$c18;
								          peg$currPos++;
								        } else {
								          s2 = peg$FAILED;
								          if (peg$silentFails === 0) { peg$fail(peg$c19); }
								        }
								        if (s2 !== peg$FAILED) {
								          s3 = [];
								          if (peg$c20.test(input.charAt(peg$currPos))) {
								            s4 = input.charAt(peg$currPos);
								            peg$currPos++;
								          } else {
								            s4 = peg$FAILED;
								            if (peg$silentFails === 0) { peg$fail(peg$c21); }
								          }
								          if (s4 !== peg$FAILED) {
								            while (s4 !== peg$FAILED) {
								              s3.push(s4);
								              if (peg$c20.test(input.charAt(peg$currPos))) {
								                s4 = input.charAt(peg$currPos);
								                peg$currPos++;
								              } else {
								                s4 = peg$FAILED;
								                if (peg$silentFails === 0) { peg$fail(peg$c21); }
								              }
								            }
								          } else {
								            s3 = peg$c0;
								          }
								          if (s3 !== peg$FAILED) {
								            if (input.charCodeAt(peg$currPos) === 125) {
								              s4 = peg$c22;
								              peg$currPos++;
								            } else {
								              s4 = peg$FAILED;
								              if (peg$silentFails === 0) { peg$fail(peg$c23); }
								            }
								            if (s4 !== peg$FAILED) {
								              s5 = [];
								              s6 = peg$parsespace();
								              while (s6 !== peg$FAILED) {
								                s5.push(s6);
								                s6 = peg$parsespace();
								              }
								              if (s5 !== peg$FAILED) {
								                peg$reportedPos = s0;
								                s1 = peg$c24(s3);
								                s0 = s1;
								              } else {
								                peg$currPos = s0;
								                s0 = peg$c0;
								              }
								            } else {
								              peg$currPos = s0;
								              s0 = peg$c0;
								            }
								          } else {
								            peg$currPos = s0;
								            s0 = peg$c0;
								          }
								        } else {
								          peg$currPos = s0;
								          s0 = peg$c0;
								        }
								      } else {
								        peg$currPos = s0;
								        s0 = peg$c0;
								      }

								      return s0;
								    }

								    function peg$parsespace() {
								      var s0;

								      if (peg$c25.test(input.charAt(peg$currPos))) {
								        s0 = input.charAt(peg$currPos);
								        peg$currPos++;
								      } else {
								        s0 = peg$FAILED;
								        if (peg$silentFails === 0) { peg$fail(peg$c26); }
								      }

								      return s0;
								    }

								    peg$result = peg$startRuleFunction();

								    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
								      return peg$result;
								    } else {
								      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
								        peg$fail({ type: "end", description: "end of input" });
								      }

								      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
								    }
								  }

								  return {
								    SyntaxError: SyntaxError,
								    parse:       parse
								  };
								})();
							}
						}
					}
				}
			}
		}
	}
})("/var/www/galojs/js/lambda.webmake");
